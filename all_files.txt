Cale: src//Controller/.gitignore
Nume: .gitignore
Continut:

-------------------------------------
Cale: src//Controller/Admin/AdminDashboardController.php
Nume: AdminDashboardController.php
Continut:
<?php

namespace App\Controller\Admin;

use App\Entity\Horaire;
use App\Entity\Contact;
use App\Entity\Service;
use App\Entity\Employes;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class AdminDashboardController extends AbstractDashboardController
{
    #[Route('/admin', name: 'admin')]
    public function index(): Response
    {
        // return parent::index();

        // Option 1. You can make your dashboard redirect to some common page of your backend
        //
        // $adminUrlGenerator = $this->container->get(AdminUrlGenerator::class);
        // return $this->redirect($adminUrlGenerator->setController(OneOfYourCrudController::class)->generateUrl());

        // Option 2. You can make your dashboard redirect to different pages depending on the user
        //
        // if ('jane' === $this->getUser()->getUsername()) {
        //     return $this->redirect('...');
        // }

        // Option 3. You can render some custom template to display a proper dashboard with widgets, etc.
        // (tip: it's easier if your template extends from @EasyAdmin/page/content.html.twig)
        //
        // return $this->render('some/path/my-dashboard.html.twig');

        return $this->render('admin/dashboard.html.twig');
    }

    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()
            ->setTitle('Garage Vincent Parrot');
    }

    public function configureMenuItems(): iterable
    {
        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
        yield MenuItem::linkToCrud('Employes', 'fas fa-list', Employes::class);
        yield MenuItem::linkToCrud('Services', 'fas fa-list', Service::class);
        yield MenuItem::linkToCrud('Horaire', 'fas fa-list', Horaire::class);
        yield MenuItem::linkToCrud('Contact', 'fas fa-list', Contact::class);
    }
}

-------------------------------------
Cale: src//Controller/Admin/ContactCrudController.php
Nume: ContactCrudController.php
Continut:
<?php

namespace App\Controller\Admin;

use App\Entity\Contact;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class ContactCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Contact::class;
    }

    /*
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
        ];
    }
    */
}

-------------------------------------
Cale: src//Controller/Admin/EmployesCrudController.php
Nume: EmployesCrudController.php
Continut:
<?php

namespace App\Controller\Admin;

use App\Entity\Employes;
use EasyCorp\Bundle\EasyAdminBundle\Config\{Action, Actions, Crud, KeyValueStore};
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\{IdField, EmailField, TextField, RepeatedField, DateTimeField};
use Symfony\Component\Form\Extension\Core\Type\{PasswordType, RepeatedType};
use Symfony\Component\Form\{FormBuilderInterface, FormEvent, FormEvents};
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Regex;

class EmployesCrudController extends AbstractCrudController
{
    public function __construct(
        public UserPasswordHasherInterface $userPasswordHasher
    ) {
    }

    public static function getEntityFqcn(): string
    {
        return Employes::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->add(Crud::PAGE_EDIT, Action::INDEX)
            ->add(Crud::PAGE_INDEX, Action::DETAIL)
            ->add(Crud::PAGE_EDIT, Action::DETAIL);
    }

    public function configureFields(string $pageName): iterable
    {
        $fields = [
            IdField::new('id')->hideOnForm(),
            TextField::new('prenom'),
            TextField::new('nom'),
            EmailField::new('email'),
            DateTimeField::new('DateCreation')->hideOnForm(),
            TextField::new('password', 'Password')
                ->onlyOnForms()
                ->setFormType(RepeatedType::class)
                ->setFormTypeOptions([
                    'type' => PasswordType::class,
                    'first_options' => ['label' => 'Password'],
                    'second_options' => ['label' => 'Repeat Password'],
                    'invalid_message' => 'The password fields must match.',
                    'required' => $pageName === Crud::PAGE_NEW,
                    'constraints' => [
                        new NotBlank(['groups' => ['registration']]),
                        new Regex([
                            'pattern' => '/^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/',
                            'message' => 'Password must be at least 8 characters long and include at least one uppercase letter, one digit, and one special character.',
                            'groups' => ['registration'],
                        ]),
                    ],
                ]),
        ];

        return $fields;
    }

    public function createNewFormBuilder(EntityDto $entityDto, KeyValueStore $formOptions, AdminContext $context): FormBuilderInterface
    {
        $formBuilder = parent::createNewFormBuilder($entityDto, $formOptions, $context);
        return $this->addPasswordEventListener($formBuilder);
    }

    public function createEditFormBuilder(EntityDto $entityDto, KeyValueStore $formOptions, AdminContext $context): FormBuilderInterface
    {
        $formBuilder = parent::createEditFormBuilder($entityDto, $formOptions, $context);
        return $this->addPasswordEventListener($formBuilder);
    }

    private function addPasswordEventListener(FormBuilderInterface $formBuilder): FormBuilderInterface
    {
        return $formBuilder->addEventListener(FormEvents::POST_SUBMIT, $this->hashPassword());
    }

    private function hashPassword()
    {
        return function ($event) {
            $form = $event->getForm();
            if (!$form->isValid()) {
                return;
            }
            $password = $form->get('password')->getData();
            if ($password === null) {
                return;
            }

            $hash = $this->userPasswordHasher->hashPassword($form->getData(), $password);
            $form->getData()->setPassword($hash);
        };
    }
}

-------------------------------------
Cale: src//Controller/Admin/HoraireCrudController.php
Nume: HoraireCrudController.php
Continut:
<?php

namespace App\Controller\Admin;

use App\Entity\Horaire;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class HoraireCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Horaire::class;
    }

    /*
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
        ];
    }
    */
}

-------------------------------------
Cale: src//Controller/Admin/ServiceCrudController.php
Nume: ServiceCrudController.php
Continut:
<?php

namespace App\Controller\Admin;

use App\Entity\Service;
use Vich\UploaderBundle\Form\Type\VichImageType;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;

class ServiceCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Service::class;
    }

    public function configureFields(string $pageName): iterable
    {
        yield TextField::new('titre');
        yield TextareaField::new('imageFile')->setFormType(VichImageType::class)->hideOnIndex();
        yield ImageField::new('imageName')->setBasePath('/images/services')->hideOnForm();
        yield IntegerField::new('imageSize')->hideOnForm();
        yield TextareaField::new('description1');
        yield TextareaField::new('description2');
        yield TextField::new('listeitem1');
        yield TextField::new('listeitem2');
        yield TextField::new('listeitem3');
        yield TextField::new('listeitem4');
        yield TextField::new('listeitem5');
        yield TextareaField::new('description3');
    }
}

-------------------------------------
Cale: src//Controller/Api/VehiculesController.php
Nume: VehiculesController.php
Continut:
<?php

namespace App\Controller\Api;


use JMS\Serializer\SerializerInterface;
use JMS\Serializer\SerializationContext;
use App\Repository\VehiculeRepository;
use Knp\Component\Pager\PaginatorInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

/**
 * Controller for handling API requests related to vehicles.
 */
class VehiculesController extends AbstractController
{
  //  Retrieves all vehicles and returns a JSON response.
  #[Route(path: 'api/vehicules', name: "api_vehicules_index", methods: ['GET'])]
  public function index(VehiculeRepository $vehiculesRepository, SerializerInterface $serializer): JsonResponse
  {
    // Retrieve all vehicles from the repository
    $vehicules = $vehiculesRepository->findAll();

    // Serialize the vehicles to JSON using the specified serialization context
    $context = SerializationContext::create()->setGroups("getVehicules");
    $jsonVehicules = $serializer->serialize($vehicules, 'json', $context);

    // Return a JSON response with the serialized vehicles
    return new JsonResponse($jsonVehicules, Response::HTTP_OK, [], true);
  }

  #[Route(path: 'api/vehiculesby', name: "api_vehiculesby_index", methods: ['GET'])]
  public function vehiculesBy(VehiculeRepository $vehiculesRepository, SerializerInterface $serializer, PaginatorInterface $paginator, Request $request): JsonResponse
  {
    $vehicules = $vehiculesRepository->findBy([], []);
    $vehiculesPager = $paginator->paginate(
      $vehicules,
      $request->query->getInt('page', 1),
      3
    );

    $data = [];
    foreach ($vehiculesPager->getItems() as $key => $value) {
      $dataItem = [
        'vehicules' => $value
      ];
      $data[] = $dataItem;
    }

    $getData = [
      'data' => $data,
      'curent_page_number' => $vehiculesPager->getCurrentPageNumber(),
      'number_per_page' => $vehiculesPager->getItemNumberPerPage(),
      'total_count' => $vehiculesPager->getTotalItemCount()
    ];

     // Serialize the vehicles to JSON using the specified serialization context
    $context = SerializationContext::create()->setGroups("getVehicules");
    $jsonVehicules = $serializer->serialize($getData, 'json', $context);

    // Return a JSON response with the serialized vehicles
    return new JsonResponse($jsonVehicules, Response::HTTP_OK, [], true);
  }

  #[Route(path: 'api/vehicules/{id}', name: "api_vehicule_show", methods: ['GET'])]
  public function showProduct(int $id, VehiculeRepository $vehiculesRepository, SerializerInterface $serializer): JsonResponse
  {
    $vehicules = $vehiculesRepository->find($id);
    $context = SerializationContext::create()->setGroups("getVehicules");
    $jsonVehicules = $serializer->serialize($vehicules, 'json', $context);

    return new JsonResponse($jsonVehicules, Response::HTTP_OK, [], true);
  }
}

-------------------------------------
Cale: src//Controller/ContactController.php
Nume: ContactController.php
Continut:
<?php

namespace App\Controller;

use App\Form\ContactType;
use App\Entity\Contact;
use DateTime;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Mime\Email;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Mailer\Exception\TransportExceptionInterface;
use Symfony\Component\VarDumper\Cloner\Data;

class ContactController extends AbstractController
{
  #[Route('/contact', name: 'app_contact')]  //, methods: ['GET', 'POST']
  public function index(Request $request, EntityManagerInterface $entityManager, MailerInterface $mailer): Response
  {
    $contact = new Contact();
    $form = $this->createForm(ContactType::class, $contact);

    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {

      $contactFormData = $form->getData();
      $contact->setDateEnvoi(new DateTime());
      $entityManager->persist($contact);
      $entityManager->flush();
      // Create a new email message
      $email = (new Email())
        ->priority(Email::PRIORITY_HIGH)
        ->from($contact->getEmail())
        ->to('test@gmail.com')
        ->subject('Formulaire contact V. Parrot')
        ->text(
          'Expéditeur : ' . $contact->getNom() . ' ' . $contact->getPrenom() . \PHP_EOL .
            'E-mail : ' . $contact->getEmail() . \PHP_EOL .
            'Téléphone : ' . $contact->getTel() . \PHP_EOL .
            'Message : ' . $contact->getMessage() . \PHP_EOL .
            'Date : ' . $contact->getDateEnvoi()->format('Y-m-d H:i:s'),
          'text/plain'
        );
      // Try to send the email using the Gmail service
      try {
        $mailer->send($email);
        // Display success message on successful email sending
        $this->addFlash('success', 'Votre message a été envoyé.');
      } catch (TransportExceptionInterface $e) {
        echo $e->getDebug();
        // some error prevented the email sending; display an
        // error message or try to resend the message

      }
      // Redirect to the contact form page after successful submission
      return $this->redirectToRoute('app_contact');
    }
    // Render the contact form template
    return $this->render('contact/index.html.twig', [
      'contact_form' => $form->createView(),
    ]);
  }
}

-------------------------------------
Cale: src//Controller/Employes/CarburantCrudController.php
Nume: CarburantCrudController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\Carburant;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class CarburantCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Carburant::class;
    }

    /*
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
        ];
    }
    */
}

-------------------------------------
Cale: src//Controller/Employes/CategorieCrudController.php
Nume: CategorieCrudController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\Categorie;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class CategorieCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Categorie::class;
    }

    /*
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
        ];
    }
    */
}

-------------------------------------
Cale: src//Controller/Employes/EmployesDashboardController.php
Nume: EmployesDashboardController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\Type;
use App\Entity\Marque;
use App\Entity\Modele;
use App\Entity\Vehicule;
use App\Entity\Categorie;
use App\Entity\Carburant;
use App\Entity\Temoignage;
use App\Entity\ExemplaireImage;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class EmployesDashboardController extends AbstractDashboardController
{
    #[Route('/employes', name: 'employes')]
    public function index(): Response
    {
        // return parent::index();

        // Option 1. You can make your dashboard redirect to some common page of your backend
        //
        // $adminUrlGenerator = $this->container->get(AdminUrlGenerator::class);
        // return $this->redirect($adminUrlGenerator->setController(OneOfYourCrudController::class)->generateUrl());

        // Option 2. You can make your dashboard redirect to different pages depending on the user
        //
        // if ('jane' === $this->getUser()->getUsername()) {
        //     return $this->redirect('...');
        // }

        // Option 3. You can render some custom template to display a proper dashboard with widgets, etc.
        // (tip: it's easier if your template extends from @EasyAdmin/page/content.html.twig)
        //
        // return $this->render('some/path/my-dashboard.html.twig');

        return $this->render('employes/dashboard.html.twig');
    }

    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()
            ->setTitle('Garage Vincent Parrot');
    }

    public function configureMenuItems(): iterable
    {
        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
        yield MenuItem::linkToCrud('Marques', 'fas fa-list', Marque::class);
        yield MenuItem::linkToCrud('Modeles', 'fas fa-list', Modele::class);
        yield MenuItem::linkToCrud('Categories Vehicule', 'fas fa-list', Categorie::class);
        yield MenuItem::linkToCrud('Type carrosserie', 'fas fa-list', Type::class);
        yield MenuItem::linkToCrud('Energie Vehicule', 'fas fa-gas-pump', Carburant::class);
        yield MenuItem::linkToCrud('Vehicules', 'fas fa-car', Vehicule::class);
        //yield MenuItem::linkToCrud('Image Exemplaires', 'fas fa-image', ExemplaireImage::class);
        yield MenuItem::linkToCrud('Témoignages', 'fas fa-comment', Temoignage::class);
    }
}

-------------------------------------
Cale: src//Controller/Employes/MarqueCrudController.php
Nume: MarqueCrudController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\Marque;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class MarqueCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Marque::class;
    }

    /*
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
        ];
    }
    */
}

-------------------------------------
Cale: src//Controller/Employes/ModeleCrudController.php
Nume: ModeleCrudController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\Modele;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class ModeleCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Modele::class;
    }

    public function configureFields(string $pageName): iterable
    {
        yield from parent::configureFields($pageName);
        yield AssociationField::new('marque');
    }
}

-------------------------------------
Cale: src//Controller/Employes/TemoignageCrudController.php
Nume: TemoignageCrudController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\Temoignage;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use Symfony\Bundle\SecurityBundle\Security;
use Doctrine\ORM\EntityManagerInterface;


class TemoignageCrudController extends AbstractCrudController
{
    private $security;
    //private $employe;

    public function __construct(Security $security)
    {
        $this->security = $security;
    }

    public static function getEntityFqcn(): string
    {
        return Temoignage::class;
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        // Set employe field to the current logged-in user
        $employe = $this->security->getUser();
        
        if ($entityInstance instanceof Temoignage) {
            $entityInstance->addEmploye($employe);
        }
        
        parent::persistEntity($entityManager, $entityInstance);
    }

    public function configureFields(string $pageName): iterable
    {
        yield TextField::new('Nom');
        yield TextAreaField::new('Commentaire');
        yield IntegerField::new('Note');
        yield BooleanField::new('Approuve');
        yield DateTimeField::new('updatedAt')->hideOnIndex()->setDisabled(true);
        //dd($this->security->getUser());
        
        if ($this->isGranted('ROLE_EMPLOYE')) {
          // If the current user has the ROLE_EMPLOYE role, set the employe field
          $employe = $this->security->getUser();
          //dd($employe);
          yield AssociationField::new('employe')->setValue($employe);
        } else {
          // If the current user does not have the ROLE_EMPLOYE role, allow selecting employe manually
          yield AssociationField::new('employe');
        }
        
    } 
}

-------------------------------------
Cale: src//Controller/Employes/TypeCrudController.php
Nume: TypeCrudController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\Type;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class TypeCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Type::class;
    }

    /*
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
        ];
    }
    */
}

-------------------------------------
Cale: src//Controller/Employes/VehiculeCrudController.php
Nume: VehiculeCrudController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\Vehicule;
use App\Form\Type\VehiculeImageType;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Bundle\SecurityBundle\Security;
use Doctrine\ORM\EntityManagerInterface;

class VehiculeCrudController extends AbstractCrudController
{
    private $security;
  
    public function __construct(Security $security)
    {
        $this->security = $security;
    }

    public static function getEntityFqcn(): string
    {
        return Vehicule::class;
    }
    
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
      // Set employe field to the current logged-in user
      $employe = $this->security->getUser();
      $entityInstance->addEmploye($employe);
      
      parent::persistEntity($entityManager, $entityInstance);
    }

    public function configureFields(string $pageName): iterable
    {   //dd($this->security);
        yield AssociationField::new('marque');
        yield AssociationField::new('modele');
        yield TextField::new('titre');
        yield AssociationField::new('categorie');
        yield AssociationField::new('type');
        yield AssociationField::new('carburant');
        yield IntegerField::new('prix');
        yield IntegerField::new('annee');
        yield IntegerField::new('kilometrage');
        yield DateTimeField::new('Date_Ajout')->hideOnIndex()->setDisabled(true);
        yield CollectionField::new('images')
            ->setEntryType(VehiculeImageType::class)
            //->onlyOnForms()
            ->setFormTypeOption('allow_add', true)
            ->setFormTypeOption('allow_delete', true);
        yield TextareaField::new('description');
        yield TextareaField::new('options');
        
    }
}

-------------------------------------
Cale: src//Controller/Employes/VehiculeImageCrudController.php
Nume: VehiculeImageCrudController.php
Continut:
<?php

namespace App\Controller\Employes;

use App\Entity\VehiculeImage;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class VehiculeImageCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return VehiculeImage::class;
    }

    /*
    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
        ];
    }
    */
}

-------------------------------------
Cale: src//Controller/HomeController.php
Nume: HomeController.php
Continut:
<?php

namespace App\Controller;

use App\Entity\Temoignage;
use App\Form\TemoignageType;
use App\Repository\ServiceRepository;
use App\Repository\TemoignageRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;

class HomeController extends AbstractController
{
    #[Route('/', name: 'app_home')]
    public function index(ServiceRepository $serviceRepository, TemoignageRepository $temoignageRepository, EntityManagerInterface $entityManager, Request $request): Response
    {
        $approuve = true;
        $services = $serviceRepository->findAll();
        $temoignages = $temoignageRepository->findBy(['Approuve'=>$approuve],[]);
        //dd($temoignages);
        $temoignage = new Temoignage();
        $form = $this->createForm(TemoignageType::class, $temoignage);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()) {
            $temoignage->setApprouve(false);
            $entityManager->persist($temoignage);
            $entityManager->flush();
            $this->addFlash('success', 'Votre commentaire a été envoyé. Il sera publié après modération');
        }
        return $this->render('home/index.html.twig', [
            'title' => 'Garrage Automobile Vincent PARROT',
            'services' => $services,
            'temoignages' => $temoignages,
            'temoignage_form' => $form->createView(),
        ]);
    }
}

-------------------------------------
Cale: src//Controller/OccasionsController.php
Nume: OccasionsController.php
Continut:
<?php

namespace App\Controller;

use App\Entity\Marque;
use App\Entity\Vehicule;
use Doctrine\ORM\EntityManagerInterface;
use App\Data\SearchData;
use App\Form\SearchForm;
use App\Service\NavType;
use App\Form\ContactType;
use App\Service\NavMarque;
use App\Service\NavModele;
use App\Service\NavCategorie;
use App\Service\NavCarburant;
use Symfony\Component\Mime\Email;
use App\Repository\TypeRepository;
use App\Repository\MarqueRepository;
use App\Repository\ModeleRepository;
use App\Repository\CategorieRepository;
use App\Repository\CarburantRepository;
use App\Repository\VehiculeRepository;
use App\Repository\VehiculeImageRepository;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Mailer\Exception\TransportExceptionInterface;

class OccasionsController extends AbstractController
{
  private $entityManager;
  private $navCategorie;
  private $navType;
  private $navMarque;
  private $navModele;
  private $navCarburant;
  public function __construct(EntityManagerInterface $entityManager, NavMarque $navMarque, NavModele $navModele, NavCategorie $navCategorie, NavType $navType, NavCarburant $navCarburant)
  {
    $this->entityManager = $entityManager;
    $this->navMarque = $navMarque;
    $this->navModele = $navModele;
    $this->navCategorie = $navCategorie;
    $this->navType = $navType;
    $this->navCarburant = $navCarburant;
  }

  #[Route('/occasions', name: 'app_occasions_page')]
  public function index(VehiculeRepository $vehiculeRepository, VehiculeImageRepository $vehiculeImageRepository, Request $request): Response
  {
    $data = new SearchData();
    $data->page = $request->get('page', 1);
    $form = $this->createForm(SearchForm::class, $data);
    $form->handleRequest($request);
    [$prixmin, $prixmax] = $vehiculeRepository->findPrixMinMax($data);
    [$kmmin, $kmmax] = $vehiculeRepository->findKmMinMax($data);
    [$anneemin, $anneemax] = $vehiculeRepository->findAnneeMinMax($data);
    $occasions = $vehiculeRepository->findSearch($data);
  
    $vehicules = $vehiculeRepository->findAll();
    $carImages = $vehiculeImageRepository->findBy(['vehicule' => $vehicules], []);
    if ($request->get('ajax')) {
      return new JsonResponse([
        'content' => $this->renderView('occasions/_occasions.html.twig', ['occasions' => $occasions]),
        'sorting' => $this->renderView('occasions/_sorting.html.twig', ['occasions' => $occasions]),
        'pagination' => $this->renderView('occasions/_pagination.html.twig', ['occasions' => $occasions]),
        'prixmin' => $prixmin,
        'prixmax' => $prixmax,
        'kmmax' => $kmmax,
        'kmmin' => $kmmin,
        'anneemin' => $anneemin,
        'anneemax' => $anneemax
      ]);
    }
    return $this->render('occasions/index.html.twig', [
      'carImages' => $carImages,
      'occasions' => $occasions,
      'form' => $form->createView(),
      'prixmin' => $prixmin,
      'prixmax' => $prixmax,
      'kmmax' => $kmmax,
      'kmmin' => $kmmin,
      'anneemin' => $anneemin,
      'anneemax' => $anneemax,
      'marqueList' => $this->navMarque->marque(),
      'categorieList' => $this->navCategorie->categorie(),
      'typeList' => $this->navType->type(),
      'modeleList' => $this->navModele->modele(),
      'carburantList' => $this->navCarburant->carburant(),
    ]);
  }

  #[Route('/occasions/vehicule/{id}', name: 'app_exemplaire_show')]
  public function exemplaireShow(int $id, VehiculeRepository $vehiculeRepository, MailerInterface $mailer, Request $request): Response
  {
    $vehiculeId = $vehiculeRepository->find($id);
    $emailSubject = $vehiculeId->getTitre();

    $form = $this->createForm(ContactType::class);

    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {

      $contactFormData = $form->getData();

      $message = (new Email())
        ->priority(Email::PRIORITY_HIGH)
        ->from($contactFormData['email'])
        ->to('test@gmail.com')
        ->subject($emailSubject)
        ->text(
          'Expéditeur : ' . $contactFormData['nom'] . ' ' . $contactFormData['prenom'] . \PHP_EOL .
            'E-mail : ' . $contactFormData['email'] . \PHP_EOL .
            'Téléphone : ' . $contactFormData['tel'] . \PHP_EOL .
            'Message : ' . $contactFormData['message'],
          'text/plain'
        );

      try {
        $mailer->send($message);
        $this->addFlash('success', 'Votre message a été envoyé.');
      } catch (TransportExceptionInterface $e) {
        echo $e->getDebug();
      }
    }

    return $this->render('occasions/vehicule.html.twig', [
      'exemplaire' => $vehiculeId,
      'contact_form' => $form->createView(),
    ]);
  }

  #[Route('/occasions/categorie/{id}', name: 'app_occcasions_categorie_show')]
  public function ocassionsByCategorie(int $id, VehiculeRepository $vehiculeRepository, CategorieRepository $categorieRepository): Response
  {
    $idCategorie = $categorieRepository->find($id);
    $categorieLibelle = $categorieRepository->findOneBy(['id' => $idCategorie], []);
    $exemplaireByCategorie = $vehiculeRepository->findBy(['categorie' => $idCategorie], []);

    return $this->render('occasions/vehiculeByCategorie.html.twig', [
      'occasions' => $exemplaireByCategorie,
      'categorieList' => $this->navCategorie->categorie(),
      'carburantList' => $this->navCarburant->carburant(),
      'marqueList' => $this->navMarque->marque(),
      'modeleList' => $this->navModele->modele(),
      'categorie' => $categorieLibelle,
      'typeList' => $this->navType->type(),
    ]);
  }

  #[Route('/occasions/type/{id}', name: 'app_occcasions_type_show')]
  public function ocassionsByType(int $id, VehiculeRepository $vehiculeRepository, TypeRepository $typeRepository): Response
  {
    $idType = $typeRepository->find($id);
    $typeLibelle = $typeRepository->findOneBy(['id' => $idType], []);
    $exemplaireByType = $vehiculeRepository->findBy(['type' => $idType], []);

    return $this->render('occasions/vehiculeByType.html.twig', [
      'occasions' => $exemplaireByType,
      'categorieList' => $this->navCategorie->categorie(),
      'marqueList' => $this->navMarque->marque(),
      'modeleList' => $this->navModele->modele(),
      'carburantList' => $this->navCarburant->carburant(),
      'typeList' => $this->navType->type(),
      'type' => $typeLibelle,

    ]);
  }

  #[Route('/occasions/marque/{id}', name: 'app_occcasions_marque_show')]
  public function ocassionsByMarque(int $id, VehiculeRepository $vehiculeRepository, MarqueRepository $marqueRepository): Response
  {
    $idMarque = $marqueRepository->find($id);
    $marqueNom = $marqueRepository->findOneBy(['id' => $idMarque], []);
    $vehiculeByMarque = $vehiculeRepository->findBy(['marque' => $idMarque], []);

    return $this->render('occasions/vehiculeByMarque.html.twig', [
      'occasions' => $vehiculeByMarque,
      'marqueList' => $this->navMarque->marque(),
      'modeleList' => $this->navModele->modele(),
      'categorieList' => $this->navCategorie->categorie(),
      'carburantList' => $this->navCarburant->carburant(),
      'typeList' => $this->navType->type(),
      'marque' => $marqueNom,

    ]);
  }

  #[Route('/occasions/modele/{id}', name: 'app_occcasions_modele_show')]
  public function ocassionsByModele(int $id, VehiculeRepository $vehiculeRepository, ModeleRepository $modeleRepository): Response
  {
    $idModele = $modeleRepository->find($id);
    $modeleNom = $modeleRepository->findOneBy(['id' => $idModele], []);
    $vehiculeByModele = $vehiculeRepository->findBy(['modele' => $idModele], []);

    return $this->render('occasions/vehiculeByModele.html.twig', [
      'occasions' => $vehiculeByModele,
      'marqueList' => $this->navMarque->marque(),
      'modeleList' => $this->navModele->modele(),
      'categorieList' => $this->navCategorie->categorie(),
      'carburantList' => $this->navCarburant->carburant(),
      'typeList' => $this->navType->type(),
      'modele' => $modeleNom,

    ]);
  }

  #[Route('/occasions/carburant/{id}', name: 'app_occcasions_carburant_show')]
  public function ocassionsByCarburant(int $id, VehiculeRepository $vehiculeRepository, CarburantRepository $carburantRepository): Response
  {
    $idCarburant = $carburantRepository->find($id);
    $carburantLibelle = $carburantRepository->findOneBy(['id' => $idCarburant], []);
    $vehiculeByCarburant = $vehiculeRepository->findBy(['carburant' => $idCarburant], []);

    return $this->render('occasions/vehiculeByCarburant.html.twig', [
      'occasions' => $vehiculeByCarburant,
      'marqueList' => $this->navMarque->marque(),
      'modeleList' => $this->navModele->modele(),
      'categorieList' => $this->navCategorie->categorie(),
      'carburantList' => $this->navCarburant->carburant(),
      'typeList' => $this->navType->type(),
      'carburant' => $carburantLibelle,

    ]);
  }

  #[Route('/modeles/fetch', name: 'modeles_fetch', methods: ['GET'])]
  public function fetchModels(Request $request): JsonResponse
  {
    $marqueId = $request->query->get('marqueId');

    if (!$marqueId) {
      return new JsonResponse([], 400); // Bad request if marqueId is missing
    }

    $marqueRepository = $this->entityManager->getRepository(Marque::class);
    $marque = $marqueRepository->find($marqueId);

    if (!$marque) {
      return new JsonResponse([], 404); // Not found
    }

    $models = $marque->getModeles();
    $formattedModels = array_map(function ($model) {
      return ['id' => $model->getId(), 'nom' => $model->getNom()];
    }, $models->toArray());

    return new JsonResponse($formattedModels);
  }

  #[Route('/vehicles/count', name: 'vehicles_count', methods: ['GET'])]
  public function countVehicles(Request $request, EntityManagerInterface $entityManager): JsonResponse
  {
    $marqueId = $request->query->get('marqueId');

    if (!$marqueId) {
      return new JsonResponse([], 400); // Bad request if marqueId is missing
    }

    // Use Doctrine Query Builder for efficiency
    $qb = $entityManager->createQueryBuilder();
    $qb->select('m.nom AS marque, m.id AS modeleId, COUNT(v.id) AS count')
      ->from(Vehicule::class, 'v')
      ->join('v.modele', 'm')
      ->where('v.marque = :marqueId')
      ->setParameter('marqueId', $marqueId)
      ->groupBy('v.modele, m.nom, m.id');

    $results = $qb->getQuery()->getResult();

    return new JsonResponse($results);
  }
}

-------------------------------------
Cale: src//Controller/PagesController.php
Nume: PagesController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class PagesController extends AbstractController
{
    #[Route('/apropos', name: 'app_apropos')]
    public function apropos(): Response
    {
        return $this->render('pages/apropos.html.twig', [
            'title' => 'A propos',
       ]);
    }

    #[Route('/mentions', name: 'mentions_legales')]
    public function contact(): Response
    {
        return $this->render('pages/mentions.html.twig', [
            'controller_name' => 'PagesController',
            'title' => 'Mentions légales',
       ]);
    }

    #[Route('/cgu', name: 'page_cgu')]
    public function cgu(): Response
    {
        return $this->render('pages/cgu.html.twig', [
            'controller_name' => 'PagesController',
            'title' => 'CGU',
        ]);
    }
}

-------------------------------------
Cale: src//Controller/SecurityController.php
Nume: SecurityController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

class SecurityController extends AbstractController
{
    #[Route(path: '/login', name: 'app_login')]
    public function login(AuthenticationUtils $authenticationUtils): Response
    {
        // if ($this->getUser()) {
        //     return $this->redirectToRoute('target_path');
        // }

        // get the login error if there is one
        $error = $authenticationUtils->getLastAuthenticationError();
        // last username entered by the user
        $lastUsername = $authenticationUtils->getLastUsername();

        return $this->render('security/login.html.twig', ['last_username' => $lastUsername, 'error' => $error]);
    }

    #[Route(path: '/logout', name: 'app_logout')]
    public function logout(): void
    {
        throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }
}

-------------------------------------
Cale: src//Data/SearchData.php
Nume: SearchData.php
Continut:
<?php
namespace App\Data;

use App\Entity\Marque;
use App\Entity\Modele;
use App\Entity\Categorie;
use App\Entity\Type;
use App\Entity\Carburant;

class SearchData
{

    /**
     * @var int
     */
    public $page = 1;

    /**
     * @var null|integer
     */
    public $prixmax;

    /**
     * @var null|integer
     */
    public $prixmin;

    /**
     * @var null|integer
     */
    public $kmmax;

    /**
     * @var null|integer
     */
    public $kmmin;

    /**
     * @var null|integer
     */
    public $anneemax;

    /**
     * @var null|integer
     */
    public $anneemin;

    /**
     * @var Marque[]
     */
    public $marque = [];

     /**
     * @var Modele[]
     */
    public $modele = [];

    /**
     * @var Categorie[]
     */
    public $categorie = [];

    /**
     * @var Type[]
     */
    public $type = [];

    /**
     * @var Carburant[]
     */
    public $carburant = [];

}
-------------------------------------
Cale: src//DataFixtures/CarburantFixtures.php
Nume: CarburantFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Carburant;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;


class CarburantFixtures extends Fixture
{

    private $counter = 1;

    public function load(ObjectManager $manager): void
    {
      $categories = [
        'Diesel',
        'Essence',
        'Hybride',
        'Électrique',
        'GPL',
        'Hydrogène',
    ];

        foreach ($categories as $categorieLibelle){

          $categorie = new Carburant();
          $categorie->setLibelle($categorieLibelle);
          $manager->persist($categorie);

          $this->addReference('carb-'.$this->counter, $categorie);
          $this->counter++;
        }

        $manager->flush();
    }
}
-------------------------------------
Cale: src//DataFixtures/CategorieFixtures.php
Nume: CategorieFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Categorie;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;


class CategorieFixtures extends Fixture
{

    private $counter = 1;

    public function load(ObjectManager $manager): void
    {
      $categories = [
        'Voiture',
        'Moto',
        'Camion',
        'Utilitaire',
    ];

        foreach ($categories as $categorieLibelle){

          $categorie = new Categorie();
          $categorie->setLibelle($categorieLibelle);
          $manager->persist($categorie);

          $this->addReference('cat-'.$this->counter, $categorie);
          $this->counter++;
        }

        $manager->flush();
    }
    
}

-------------------------------------
Cale: src//DataFixtures/EmployesFixtures.php
Nume: EmployesFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Employes;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;

class EmployesFixtures extends Fixture

{
  private $counter = 1;
  public function load(ObjectManager $manager)
  {
    $admin = new Employes();
    $admin->setNom("PARROT");
    $admin->setPrenom("Vincent");
    $admin->setEmail("admin@mail.com");
    $admin->setPassword("$2y$13\$Uw2an3wQTYcBqGe0LMIn1OQxyUa4iQLwTZ1IoW2kj3CEcB0l8G7Sm");
    $admin->setRoles(['ROLE_ADMIN']);
    $admin->setDateCreation(new \DateTimeImmutable());
    $manager->persist($admin);
    $this->addReference('empl-' . $this->counter, $admin);
    $this->counter++;

    for ($i = 0; $i < 10; $i++) {
      $employe = (new Employes())
        ->setNom("Employe$i")
        ->setPrenom("Prenom$i")
        ->setEmail("user$i@mail.com")
        ->setPassword("$2y$13\$Uw2an3wQTYcBqGe0LMIn1OQxyUa4iQLwTZ1IoW2kj3CEcB0l8G7Sm")
        ->setRoles(['ROLE_EMPLOYE'])
        ->setDateCreation(new \DateTimeImmutable());
      $manager->persist($employe);
      $this->addReference('empl-' . $this->counter, $employe);
      $this->counter++;
    }
    $manager->flush();
  }
}

-------------------------------------
Cale: src//DataFixtures/HoraireFixtures.php
Nume: HoraireFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Horaire;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;

class HoraireFixtures extends Fixture
{
    public function load(ObjectManager $manager): void
    {
        $jours = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];
        foreach ($jours as $jour) {
            $horaire = new Horaire();
            $horaire->setJour($jour);
            $horaire->setOuvertureMatin('08:45');
            $horaire->setFermetureMidi('12:00');
            $horaire->setOuvertureApresMidi('14:00');
            $horaire->setFermetureSoir('18:00');
            $manager->persist($horaire);
        }
        $horaire = new Horaire();
        $horaire->setJour('Samedi');
        $horaire->setOuvertureMatin('08:45');
        $horaire->setFermetureMidi('12:00');
        $horaire->setOuvertureApresMidi('Fermé');
        $horaire->setFermetureSoir('Fermé');
        $manager->persist($horaire);

        $horaire = new Horaire();
        $horaire->setJour('Dimanche');
        $horaire->setOuvertureMatin('Fermé');
        $horaire->setFermetureMidi('Fermé');
        $horaire->setOuvertureApresMidi('Fermé');
        $horaire->setFermetureSoir('Fermé');
        $manager->persist($horaire);

        $manager->flush();
    }
}

-------------------------------------
Cale: src//DataFixtures/MarqueFixtures.php
Nume: MarqueFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Marque;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;


class MarqueFixtures extends Fixture
{

  private $counter = 1;

  public function load(ObjectManager $manager): void
  {
    $marques = [
      'Abarth',
      'Acura',
      'Aixam',
      'Alfa Romeo',
      'Aro',
      'Aston Martin',
      'Audi',
      'Austin',
      'Baic',
      'Bentley',
      'BMW',
      'Bugatti',
      'Buick',
      'Byd',
      'Cadillac',
      'Chatenet',
      'Chevrolet',
      'Chrysler',
      'Citroën',
      'Comarth',
      'Cupra',
      'Dacia',
      'Daewoo',
      'Daihatsu',
      'DFSK',
      'DKW',
      'Dodge',
      'DR',
      'DS Automobiles',
      'Eagle',
      'Excalibur',
      'FAW',
      'Ferrari',
      'Fiat',
      'Ford',
      'Genesis',
      'GMC',
      'Gonow',
      'Grecav',
      'Holden',
      'Honda',
      'Hummer',
      'Hyundai',
      'Ineos',
      'Infiniti',
      'Isuzu',
      'Iveco',
      'Jaguar',
      'Jeep',
      'Kaipan',
      'KG Mobility',
      'Kia',
      'Koenigsegg',
      'KTM X-Bow',
      'Lada',
      'Lamborghini',
      'Lancia',
      'Land Rover',
      'Lexus',
      'Ligier',
      'Lincoln',
      'Lotus',
      'LuAZ',
      'Lynk & Co',
      'Maruti',
      'Maserati',
      'Maxus',
      'Maybach',
      'Mazda',
      'McLaren',
      'Mercedes-Benz',
      'Mercury',
      'Microcar',
      'Mini',
      'Mitsubishi',
      'Morgan',
      'MPM Motors',
      'Nissan',
      'NSU',
      'Nysa',
      'Opel',
      'Peugeot',
      'Plymouth',
      'Polonez',
      'Pontiac',
      'Porsche',
      'Proton',
      'Renault',
      'Rivian',
      'Rols-Royce',
      'Rover',
      'Saab',
      'Samsung',
      'Saturn',
      'Seat',
      'Skoda',
      'Skywell',
      'Smart',
      'SsangYong',
      'Subaru',
      'Suzuki',
      'Syrena',
      'Tarpan',
      'Tata',
      'Tatra',
      'Tavria',
      'Tazzari',
      'Tesla',
      'Toyota',
      'Trabant',
      'Triumph',
      'TVR',
      'Vauxhall',
      'Volkswagen',
      'Volvo',
      'Warszawa',
      'Xev',
      'Yugo',
      'Zaporożec',
      'Zastawa',
    ];

    foreach ($marques as $marqueNom) {

      $marque = new Marque();
      $marque->setNom($marqueNom);
      $manager->persist($marque);

      $this->addReference('mar-' . $this->counter, $marque);

       // Add debugging statement
       //var_dump("Marque Reference: mar-" . $this->counter);

      $this->counter++;
    }

    $manager->flush();
  }
}

-------------------------------------
Cale: src//DataFixtures/ModeleFixtures.php
Nume: ModeleFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager; // Corrected namespace
use App\Entity\Modele;
use Faker\Factory;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;

class ModeleFixtures extends Fixture implements DependentFixtureInterface
{
  private $counter = 1;
  private $i = 1;
  private $j = 1;
  private $k = 1;
  public function load(ObjectManager $manager)
  {
    $modelsByMarque = [
      'Abarth' => ['124', '124 Spider', '500', '595', '695', 'Grande Punto', 'Inny'],
      'Acura' => ['CL', 'CSX', 'EL', 'ILX', 'Integra', 'Legend', 'MDX', 'NSX', 'RDX', 'RL', 'RLX', 'ESX', 'TL', 'TLX', 'TSX', 'Vigor', 'ZDX'],
      'Aixam' => ['City', 'Coupé', 'Crossline', 'Crossover', 'D-Truck', 'e-Truck', 'Miniauto', 'Roadline', 'Scouty R', 'Série A'],
      'Alfa Romeo' => ['145', '146', '147', '155', '156', '159', '164', '166', '33', '4C', '75', '90', 'Alfasud', 'Alfetta', 'Brera', 'Crosswagon', 'Giulia', 'Giulietta', 'GT', 'GTV', 'Mito', 'Spider', 'Sprint', 'Stelvio', 'Tonale'],
      'Aro' => ['Série 10', 'Série 240', 'Série IMS', 'Spartana'],
      'Aston Martin' => ['AMV8', 'Bulldog', 'Cygnet', 'DB11', 'DB4', 'DB5', 'DB6', 'DB7', 'DB9', 'DBS', 'DBX', 'Legonda', 'One-77', 'Rapide', 'V12 Vantage', 'V8 Vantage', 'Vanquish', 'Virage', 'Volante', 'Zagato'],
      'Audi' => ['100', '200', '80', '90', 'A1', 'A2', 'A3', 'A4', 'A4 Allroad', 'A5', 'A6', 'A6 Allroad', 'A7', 'A8', 'Q2', 'Q3', 'Q4', 'Q5', 'Q7', 'Q8', 'Quattro', 'R8', 'RS Q3', 'RS Q8', 'RS2', 'RS3', 'RS4', 'RS5', 'RS6', 'RS7', 'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'SQ2', 'SQ5', 'SQ7', 'SQ8', 'TT', 'TT RS', 'TT S', 'V8'],
      'Austin' => ['Allegro', 'Ambasador', 'Maestro', 'Maxi', 'Metro', 'Mini', 'Montego', 'Princess'],
      'Baic' => ['X35', 'X55'],
      'Bentley' => ['Arnage', 'Azure', 'Bentayga', 'Brooklands', 'Continental', 'Eight', 'Flying Spur', 'Mulliner', 'Mulsanne', 'Turbo'],
      'BMW' => ['Alpina', 'i3', 'i4', 'i7', 'i8', 'iX', 'iX1', 'iX3', 'M1', 'M2', 'M3', 'M4', 'M5', 'M6', 'M7', 'M8', 'Série 1', 'Série 2', 'Série 3', 'Série 4', 'Série 5', 'Série 6', 'Série 7', 'Série 8', 'X1', 'X2', 'X3', 'X3 M', 'X4', 'X4 M', 'X5', 'X5 M', 'X6', 'X6 M', 'X7', 'XM', 'Z1', 'Z3', 'Z3 M', 'Z4', 'Z4 M', 'Z8'],
      'Bugatti' => ['Chiron', 'EB 110', 'Veyron'],
      'Buick' => ['Centurion', 'Century', 'Electra', 'Enclave', 'La Crosse', 'Le Sabre', 'Lucerne', 'Park Avenue', 'Reatta', 'Regal', 'Rendezvous', 'Riviera', 'Roadmaster', 'Skyhawk', 'Skylark'],
      'Byd' => ['Atto', 'Dolphin', 'Han', 'Seal', 'Tang'],
      'Cadillac' => ['Allante', 'ATS', 'BLS', 'Brougham', 'Cimarron', 'CT5', 'CT6', 'CTS', 'Deville', 'DTS', 'Eldorado', 'Escalade', 'Fleetwood', 'Seville', 'SRX', 'STS', 'XLR', 'XT4', 'XT5', 'XT6', 'XTS'],
      'Chatenet' => ['Barooder', 'CH26', 'CH28', 'CH30', 'CH32', 'CH39', 'CH40', 'CH46', 'Speedino'],
      'Chevrolet' => ['2500', 'Alero', 'Astro', 'Avalanche', 'Aveo', 'Beretta', 'Blazer', 'Camaro', 'Caprice', 'Captiva', 'Cavalier', 'Chevelle', 'Chevy Van', 'Colorado', 'Corsica', 'Corvette', 'Cruze', 'El Camino', 'Epica', 'Equinox', 'Evanda', 'Express', 'G', 'HHR', 'Impala', 'Kalos', 'Lacetti', 'Lumina', 'Malibu', 'Matiz', 'Nubira', 'Orlando', 'Rezzo', 'S-10', 'Silverado', 'Spark', 'Spectrum', 'SSR', 'Suburban', 'Tacuma', 'Tahoe', 'Trailblazer', 'Trans Sport', 'Traverse', 'Trax', 'Venture', 'Volt'],
      'Chrysler' => ['300C', '300M', 'Aspen', 'Caravan', 'Concorde', 'Crossfire', 'Daytona', 'ES', 'Grand Voyager', 'GS', 'GTS', 'Le Baron', 'LHS', 'Neon', 'New Yorker', 'Pacifica', 'Prowler', 'PT Cruiser', 'Saratoga', 'Serbring', 'Stratus', 'Town & Country', 'Valiant', 'Viper', 'Vision', 'Voyager'],
      'Citroën' => ['2 CV', 'AX', 'Axel', 'Berlingo', 'BX', 'C-Crosser', 'C-Elysée', 'C-Zero', 'C1', 'C2', 'C3', 'C3 Aircross', 'C3 Picasso', 'C3 Pluriel', 'C4', 'C4 Aircross', 'C4 Cactus', 'C4 Grand Picasso', 'C4 Grand Space Tourer', 'C4 Picasso', 'C4 Space Tourer', 'C4X', 'C5', 'C5 Aircross', 'C6', 'C8', 'Cactus', 'CX', 'DS', 'DS3', 'DS4', 'DS5', 'DS7', 'Evasion', 'GSA', 'Jumper', 'Jumpy', 'Nemo', 'Saxo', 'SM', 'Spacetourer', 'eSpacetourer', 'Visa', 'Xantia', 'XM', 'Xsara', 'Xsara Picasso', 'ZX'],
      'Comarth' => ['CR', 'S1'],
      'Cupra' => ['Ateca', 'Born', 'Formentor', 'Leon'],
      'Dacia' => ['1100', '1300', '1310', '1400', '1410', 'Dokker', 'Duster', 'Jogger', 'Lodgy', 'Logan', 'Logan Stepway', 'Logan Van', 'Nova', 'Pick Up', 'Sandero', 'Sandero Stepway', 'Solenza', 'Spring', 'Super Nova'],
      'Daewoo' => ['Chairman', 'Cielo', 'Espero', 'Evanda', 'Kalos', 'Korando', 'Lacetti', 'Lanos', 'Leganza', 'Matiz', 'Musso', 'Nexia', 'Nubira', 'Racer', 'Rezzo', 'Tacuma', 'Tico'],
      'Daihatsu' => ['Applause', 'Charade', 'Charmant', 'Copen', 'Cuore', 'Feroza', 'Fourtrak', 'Freeclimbe', 'Gran Move', 'Hijet', 'Materia', 'Move', 'Rocky', 'Sirion', 'Sportrak', 'Terios', 'YRV'],
      'DFSK' => ['Double Cab', 'EC 31', 'EC 35', 'Fengon 5', 'Fengon 500', 'Fegon 580', 'Mini Bus', 'Mini Van', 'Pick Up', 'Seres 3'],
      'DKW' => ['Schnellaster van', 'F10', 'F89', '3=6', 'Monza', 'Munga off-road', 'Junior', 'F102'],
      'Dodge' => ['Avenger', 'Caliber', 'Varavan', 'Challenger', 'Charger', 'Dakota', 'Dart', 'Daytona', 'Diplomat', 'Durango', 'Dynasty', 'Grand Caravan', 'Hornet', 'Intrepid', 'Journey', 'Magnum', 'Neon', 'Nitro', 'Omni', 'RAM', 'Sprint', 'Stealth', 'Stratus', 'Viper'],
      'DR' => ['DR 1.0', 'DR 3.0', 'DR 4.0', 'DR 5.0', 'DR 6.0', 'DR 7.0', 'DR PK8', 'DR1', 'DR2', 'DR3', 'DR4', 'DR5', 'DR 6', 'DR CityCross', 'DR F35', 'DR Zero', 'EVO 3', 'EVO 4', 'EVO 5', 'EVO 7', 'EVO Cross 4', 'ICKK K2', 'Sportequipe 5', 'Sportequipe 6', 'Sportequipe 7'],
      'DS Automobiles' => ['DS 3', 'DS 3 Crossback', 'DS 4', 'DS 4 Crossback', 'DS 5', 'DS 7 Crossback', 'DS 9'],
      'Eagle' => ['Medallion', 'Premier', 'Summit', 'Talon', 'Vision'],
      'Excalibur' => ['Phaeton', 'Roadster'],
      'FAW' => ['HQ', 'NAT'],
      'Ferrari' => ['208/308', '296 GTB', '328', '348', '360', '400', '412', '456', '458', '488 GTB', '488 Spider', '512', '575', '599', '612', '812', 'California', 'Dino', 'Enzo', 'F12', 'F355', 'F40', 'F430', 'F50', 'F8', 'FF', 'FXX', 'GTC4Lusso', 'LaFerrari', 'Mondial', 'Portofino', 'Purosangue', 'Roma', 'SF90 Stradale', 'Superamerica', 'Testarossa'],
      'Fiat' => ['124', '125p', '126', '127', '128', '130', '131', '132', '500', '500L', '500X', '600', '850', 'Albea', 'Barchetta', 'Brava', 'Bravo', 'Cinquecento', 'Coupé', 'Croma', 'Dino', 'Doblo', 'Ducato', 'Fiorino', 'Freemont', 'Fullback', 'Grande Punto', 'Idea', 'Linea', 'Marea', 'Multipla', 'Palio', 'Panda', 'Punto', 'Qubo', 'Regata', 'Ritmo', 'Scudo', 'Sedici', 'Seicento', 'Siena', 'Spider Europa', 'Stilo', 'Strada', 'Talento', 'Tempera', 'Tipo', 'Ulysse', 'Uno', 'X 1/9'],
      'Ford' => ['Aerostar', 'Aspire', 'B-Max', 'Bronco', 'C-Max', 'Capri', 'Contour', 'Cougar', 'Courier', 'Crown', 'Econoline', 'Econovan', 'EcoSport', 'Edge', 'Escape', 'Escort', 'Excursion', 'Expedition', 'Explorer', 'F150', 'F250', 'F350', 'Fairlane', 'Falcon', 'Festiva', 'Fiesta', 'Five Hundred', 'Focus', 'Focus C-Max', 'Freestar', 'Freestyle', 'Fusion', 'Galaxy', 'Granada', 'Grand C-Max', 'GT', 'Ka', 'Ka+', 'Kuga', 'Maverick', 'Mercury', 'Mondeo', 'Mustang', 'Mustang Mach-E', 'Orion', 'Probe', 'Puma', 'Ranger', 'Raptor', 'S-Max', 'Scorpio', 'Sierra', 'Streetka', 'Taunus', 'Taurus', 'Tempo', 'Thunderbird', 'Tourneo', 'Tourneo Connect', 'Tourneo Courier', 'Tourneo Custom', 'Transit', 'Transit Connect', 'Transit Custom', 'Windstar'],
      'Genesis' => ['G70', 'G80', 'GV60', 'GV70', 'GV80'],
      'GMC' => ['Acadia', 'Canyon', 'Envoy', 'Jimmy', 'Safari', 'Savana', 'Sierra', 'Sonoma', 'Suburban', 'Syclone', 'Terrain', 'Typhoon', 'Vandura', 'Yukon'],
      'Gonow' => ['Emei', 'G3', 'G5', 'GA200', 'GX5', 'GX6', 'Starry', 'Way CL', 'Alter', 'Dual Luck', 'Fan', 'Finite', 'GA6530', 'GS-1', 'GS-2', 'GS50 II'],
      'Grecav' => ['Sonique', 'Eke Sport'],
      'Holden' => ['Adventra', 'Astra', 'Barina', 'Berlina', 'Calais', 'Caprice', 'Captiva', 'Colorado', 'Comodore', 'Crewman', 'Cruze', 'Epica', 'Jackaroo', 'Monaro', 'Sportwagon', 'Statesman', 'Ute', 'Viva'],
      'Honda' => ['Accord', 'Aerodeck', 'City', 'Civic', 'Concerto', 'CR-V', 'CR-Z', 'CRX', 'Element', 'eNS1', 'FR-V', 'Honda e', 'HR-V', 'Insight', 'Integra', 'Jazz', 'Legend', 'Logo', 'NSX', 'Odyssey', 'Pilot', 'Prelude', 'Ridgeline', 'S 2000', 'Shuttle', 'Stream', 'ZR-V'],
      'Hummer' => ['H1', 'H2', 'H3'],
      'Hyundai' => ['Accent', 'Atos', 'Avante', 'Azera', 'Bayon', 'Coupé', 'Elantra', 'Excel', 'Galloper', 'Genesis', 'Getz', 'Grand Santa Fe', 'Grandeur', 'H-1', 'H-1 Starex', 'H200', 'H350', 'i10', 'i20', 'i30', 'i40', 'Ioniq', 'ix20', 'ix35', 'ix55', 'KONA', 'Lantra', 'Matrix', 'Pony', 'S-Coupé', 'Santa Fe', 'Santamo', 'Sonata', 'Staria', 'Terracan', 'Trajet', 'Tucson', 'Veloster', 'Veracruz', 'XG'],
      'Ineos' => ['Grenadier', 'Grenadier Quartermaster'],
      'Infiniti' => ['EX 30', 'EX 35', 'EX 37', 'FX30', 'FX35', 'FX 37', 'FX 45', 'FX 50', 'G20', 'G35', 'G37', 'I30', 'I35', 'J30', 'M30', 'M35', 'M37', 'Q30', 'Q45', 'Q50', 'Q60', 'Q70', 'QX30', 'QX50', 'QX56', 'QX70', 'QX80'],
      'Isuzu' => ['Campo', 'D-Max', 'Gemini', 'Midi', 'Pick up', 'Trooper'],
      'Iveco' => ['Massif'],
      'Jaguar' => ['Daimler', 'E-Pace', 'E-Type', 'F-Pace', 'F-Type', 'I-Pace', 'MK II', 'S-Type', 'X-Type', 'XE', 'XF', 'XJ', 'XJS', 'XK', 'XKB', 'XKR'],
      'Jeep' => ['Avenger', 'Cherokee', 'CJ', 'Comanche', 'Commander', 'Compass', 'Gladiator', 'Grand Cherokee', 'Liberty', 'Patriot', 'Renegade', 'Wagoneer', 'Willys', 'Wrangler'],
      'Kaipan' => ['14', '15', '16', '47', '57'],
      'KG Mobility' => ['Actyon', 'Family', 'Korrando', 'Kyron', 'Musso', 'Rexton', 'Rodius', 'Tivoli', 'Tivoli Grand', 'XLV'],
      'Kia' => ['Asia Rocsta', 'Besta', 'Carens', 'Carnival', 'Ceed', 'Cerato', 'Clarus', 'Elan', 'EV6', 'EV6 GT', 'Joice', 'Leo', 'Magentis', 'Mentor', 'Niro', 'Opirus', 'Optima', 'Picanto', 'Pregio', 'Pride', 'Pro Ceed', 'Retona', 'Rio', 'Roadster', 'Rocsta', 'Sedona', 'Sephia', 'Shuma', 'Serento', 'Soul', 'Spectra', 'Sportage', 'Stinger', 'Stonic', 'Venga', 'XCeed'],
      'Koenigsegg' => ['Agera', 'Gemera', 'Jesko', 'One:1', 'Regera'],
      'KTM X-Bow' => ['GT', 'GT-XR', 'GT2', 'GT4', 'GTX', 'R', 'RR'],
      'Lada' => ['110 / 2110', '111 / 2111', '112 / 2112', 'Aleko', 'Forma', 'Granta', 'Kalina', 'Largus', 'Niva', 'Nova', 'Priora', 'Samara', 'Vesta', 'XRAY'],
      'Lamborghini' => ['Aventador', 'Centenario', 'Countach', 'Diablo', 'Espada', 'Essenza SCV12', 'Gallardo', 'Huracan', 'Jalpa', 'LM', 'Miura', 'Murcielago', 'Reventon', 'Revuelto', 'SC 20', 'Sessto Elemento', 'Slan FKP 37', 'Urraco', 'Urus', 'Veneno'],
      'Lancia' => ['Beta', 'Dedra', 'Delta', 'Flamina', 'Flavia', 'Fulvia', 'Gamma', 'Kappa', 'Lybra', 'Musa', 'Phedra', 'Prisma', 'Stratos', 'Thema', 'Thesis', 'Voyager', 'Ypsilon', 'Zeta'],
      'Land Rover' => ['Defender', 'Discovery', 'Discovery Sport', 'Freelander', 'Range Rover', 'Range Rover Evoque', 'Range Rover Sport', 'Range Rover Velar', 'Range Rover Vogue'],
      'Lexus' => ['CT', 'LC 500', 'LC 500h', 'LFA', 'Série ES', 'Série GS', 'Série GX', 'Série IS', 'Série LS', 'Série LX', 'Série NX', 'Série RC', 'Série RX', 'Série SC', 'UX'],
      'Ligier' => ['Ambra', 'Be Sun', 'JS 50', 'JS 50 L', 'JS RC', 'Nova', 'Optima', 'X - Too'],
      'Lincoln' => ['Aviator', 'Continental', 'LS', 'Mark', 'MKX', 'MKZ', 'Nautilus', 'Navigator', 'Town Car'],
      'Lotus' => ['340R', 'Cortina', 'Eclat', 'Elan', 'Elise', 'Elite', 'Emira', 'Esprit', 'Europa', 'Evija', 'Evora', 'Excel', 'Exige', 'V8'],
      'LuAZ' => ['969', 'City', 'Farmer'],
      'Lynk & Co' => ['01', '02', '03', '05', '07', '06', '08', '09'],
      'Maruti' => ['800', '1000'],
      'Maserati' => ['222', '224', '228', '3200', '418', '420', '4200', '422', '424', '430', 'Biturbo', 'Coupé', 'Ghibli', 'GranCabrio', 'GranSport', 'GranTurismo', 'Grecale', 'Indy', 'Karif', 'Levante', 'MC12', 'MC20', 'Merak', 'Quattroporte', 'Shamal', 'Spyder'],
      'Maxus' => ['D60', 'D90', 'G10', 'G20', 'G50', 'G70', 'G90', 'T60', 'T70', 'T90', 'EV30', 'V70', 'V80', 'V90'],
      'Maybach' => ['57', '62', 'S 500', 'S 560 4Matic', 'S-560', 'S680 4Matic'],
      'Mazda' => ['121', '2', '3', '323', '5', '6', '626', '929', 'Bongo', 'BT-50', 'CX-3', 'CX-30', 'CX-5', 'CX-60', 'CX-7', 'Demio', 'Millenia', 'MPV', 'MX-3', 'MX-30', 'MX-5', 'MX-6', 'Premacy', 'Protege', 'RX-6', 'RX-7', 'RX-8', 'Série B', 'Série E', 'Tribute', 'Xedos'],
      'McLaren' => ['12C', '540C', '570GT', '570S', '600LT', '620R', '625C', '650C', '675LT', '720S', '765LT', 'Elva', 'F1', 'GT', 'P1', ''],
      'Mercedes-Benz' => ['190', 'A', 'AMG', 'AMG GT-S', 'B', 'C', 'CE', 'Citan', 'CL', 'CLA', 'CLC', 'CLE', 'CLK', 'CLS', 'E', 'EQA', 'EQB', 'EQC', 'EQE', 'EQS', 'EQV', 'G', 'GL', 'GLA', 'GLB', 'GLC', 'GLC Coupé', 'GLE', 'GLE Coupé', 'GLK', 'GLS', 'GLS Maybach', 'GT2', 'Marco Polo', 'MB 100', 'ML', 'Monarch', 'R', 'S', 'S Maybach', 'SL', 'SLC', 'SLK', 'SLR', 'SLS', 'Sprinter', 'T', 'V', 'Vaneo', 'Vario', 'Viano', 'Vito', 'W108', 'W111', 'W113', 'W114', 'W115', 'W116', 'W123', 'W124', 'W126', 'W201', 'X'],
      'Mercury' => ['Comet', 'Cougar', 'Marauder', 'Mariner', 'Marquis', 'Milan', 'Montego', 'Monterey', 'Mountaineer', 'Sable', 'Tracer', 'Villager', 'Zephyr'],
      'Microcar' => ['Due', 'Flex', 'M.Go', 'M8', 'MC', 'Virgo'],
      'Mini' => ['Clubman', 'Cooper', 'Cooper S', 'Cooper SE', 'Countryman', 'ONE', 'Paceman', 'Roadster'],
      'Mitsubishi' => ['3000 GT', 'ASX', 'Canter', 'Carisma', 'Colt', 'Cordia', 'Cosmos', 'Diamante', 'Eclipse', 'Eclipse-Cross', 'Endeavor', 'FTO', 'Galant', 'Galloper', 'Grandis', 'i-MiEV', 'L200', 'L300', 'L400', 'Lancer', 'Lancer Evolution', 'Mirage', 'Montero', 'Outlander', 'Pajero', 'Pajero Pinin', 'Santamo', 'Sapporo', 'Sigma', 'Space Gear', 'Space Runner', 'Space Star', 'Space Wagon', 'Starion', 'Tredia'],
      'Morgan' => ['3 Wheeler', '4/4', 'Aero 8', 'Plus 4', 'Plus 8', 'Roadster'],
      'MPM Motors' => ['Erelis', 'PS160'],
      'Nissan' => ['100 NX', '200 SX', '240 SX', '280 ZX', '300 ZX', '350 Z', '370 Z', 'Almera', 'Almera Tino', 'Altima', 'Armada', 'Bluebird', 'Cherry', 'Cube', 'Evalia', 'Frontier', 'GT-R', 'Interstar', 'Juke', 'King Cab', 'Kubistar', 'Laurel', 'LEAF', 'Maxima', 'Micra', 'Murano', 'Navara', 'Note', 'NP300 Pickup', 'NV200', 'NV400', 'Pathfinder', 'Patrol', 'Pickup', 'Pixo', 'Prairie', 'Primastar', 'Primera', 'Pulsar', 'Qashqai', 'Qashqai+2', 'Quest', 'Rogue', 'Sentra', 'Serena', 'Silvia', 'Skyline', 'Stanza', 'Sunny', 'Terrano', 'Tiida', 'Titan', 'Trade', 'Urvan', 'Vanette', 'X-Trail', 'Xterra'],
      'NSU' => ['1000', 'RO 80'],
      'Nysa' => ['Série 500', 'Série N'],
      'Opel' => ['Adam', 'Agila', 'Altul', 'Ampera', 'Ampera-e', 'Antara', 'Arena', 'Ascona', 'Astra', 'Calibra', 'Campo', 'Cascada', 'Combo', 'Commodore', 'Corsa', 'Crossland', 'Diplomat', 'Frontera', 'Grandland', 'GT', 'Insignia', 'Kadett', 'Karl', 'Manta', 'Meriva', 'Mokka', 'Monterey', 'Monza', 'Movano', 'Nova', 'Omega', 'Pick up Sportcap', 'Rekord', 'Senator', 'Signum', 'Sintra', 'Speedster', 'Tigra', 'Vectra', 'Vivaro', 'Zafira'],
      'Peugeot' => ['1007', '104', '106', '107', '108', '2008', '204', '205', '206', '207', '208', '3008', '301', '304', '305', '306', '307', '308', '309', '4007', '4008', '404', '405', '406', '407', '408', '5008', '504', '505', '508', '604', '605', '607', '806', '807', 'Bipper', 'Boxer', 'Expert', 'iON', 'Partner', 'RCZ', 'Rifter', 'Traveller'],
      'Plymouth' => ['Barracuda', 'Fury', 'GTX', 'Prowler', 'Superbird'],
      'Polonez' => ['1.5', '1.6', 'Atu', 'Caro'],
      'Pontiac' => ['1000', '6000', 'Bonneville', 'Catalina', 'Chieftain', 'Fiero', 'Firebird', 'G6', 'Grand-Am', 'Grand-Prix', 'GTO', 'Le Mans', 'Montana', 'Solstice', 'Sunbird', 'Sunfire', 'Targa', 'Trans Sport', 'Vibe'],
      'Porsche' => ['356', '911', '911-Turbo-S', '912', '914', '924', '928', '944', '959', '962', '968', '992', '992 Turbo S', 'Boxster', 'Carrera GT', 'Cayenne', 'Cayenne Coupé', 'Cayman', 'Macan', 'Panamera', 'Taycan'],
      'Proton' => ['Série 300', 'Série 400'],
      'Renault' => ['10', '11', '12', '14', '16', '18', '19', '20', '21', '25', '30', '4', '5', '8', '9', 'Alaskan', 'Arkana', 'Austral', 'Avantime', 'Captur', 'Clio', 'Espace', 'Express', 'Fluence', 'Fuego', 'Grand Espace', 'Grand Scenic', 'Kadjar', 'Kangoo', 'Koleos', 'Laguna', 'Latitude', 'Master', 'Megane', 'Modus', 'Safrane', 'Scenic', 'Scenic RX4', 'Symbol', 'Talisman', 'Trafic', 'Twingo', 'Twizy', 'Vel Satis', 'Wind', 'ZOE'],
      'Rivian' => ['R1S', 'R1T'],
      'Rols-Royce' => ['Corniche', 'Cullinan', 'Dawn', 'Flying Spur', 'Ghost', 'Park Ward', 'Phantom', 'Silver Cloud', 'Silver Down', 'Silver Seraph', 'Silver Shadow', 'Silver Spirit', 'Silver Spur', 'Touring Limousine', 'Wraith'],
      'Rover' => ['100', '200', '25', '400', '45', '600', '75', '800', '825', 'City Rover', 'Metro', 'Montego', 'SD', 'Streetwise',],
      'Saab' => ['9-2X', '9-3', '9-3X', '9-4X', '9-5', '9-7X', '90', '900', '9000', '96', '99'],
      'Samsung' => ['QM5'],
      'Saturn' => ['Astra', 'Aura', 'ION Quad Coupé', 'ION Sedan', 'Outlook', 'Relay', 'SC', 'Sky', 'SL', 'SW', 'VUE'],
      'Seat' => ['Alhambra', 'Altea', 'Altea XL', 'Arona', 'Arosa', 'Ateca', 'Cordoba', 'Exeo', 'Ibiza', 'Inca', 'Leon', 'Malaga', 'Marbella', 'Mii', 'Ronda', 'Tarraco', 'Terra', 'Toledo'],
      'Skoda' => ['100', '105', '120', '130', '135', 'Citigo', 'Enyaq', 'Fabia', 'Favorit', 'Felicia', 'Forman', 'Kamiq', 'Karoq', 'Kodiaq', 'Octavia', 'Praktik', 'Rapid', 'Roomster', 'Scala', 'Superb', 'Yeti'],
      'Skywell' => ['ET5', 'Jackdaw'],
      'Smart' => ['#1', 'Crossblade', 'Forfour', 'Fortwo', 'Roadster'],
      'SsangYong' => ['Actyon', 'Family', 'Korando', 'Kyron', 'Musso', 'Rexton', 'Rodius', 'Tivoli', 'Tivoli Grand', 'Torres', 'XLV'],
      'Subaru' => ['Ascent', 'B9 Tribeca', 'Baja', 'BRZ', 'Forester', 'G3X Justy', 'Impreza', 'Justy', 'Legacy', 'Leone', 'Levorg', 'Libero', 'Outback', 'SVX', 'Trezia', 'Tribeca', 'Vivio', 'WRX STI', 'XT', 'XV'],
      'Suzuki' => ['Across', 'Alto', 'Balenp', 'Cappucino', 'Carry', 'Celerio', 'Grand Vitara', 'Ignis', 'Jimmy', 'Kizashi', 'Liana', 'LJ', 'Reno', 'Samurai', 'Splash', 'Super-Carry', 'Swace', 'Swift', 'SX4', 'SX4 S-Cross', 'Vitara', 'Wagon R+', 'X-90', 'XL7'],
      'Syrena' => ['101', '102', '103', '104', '105', 'Bosto', 'R-20'],
      'Tarpan' => ['233', '235', '237', 'Honker'],
      'Tata' => ['Aria', 'Indica', 'Indigo', 'Nano', 'Safari', 'Sumo', 'Telcoline', 'Xenon'],
      'Tatra' => ['T613', 'T613-4', 'T700'],
      'Tavria' => ['ZAZ 1102', 'ZAZ 1103', 'ZAZ 1105'],
      'Tazzari' => ['EM1', 'Zero', 'Zero Evo', 'Zero SE', 'Zero Speedster', 'Zero City', 'Zerro EM2 Space', 'Zerro Junior'],
      'Tesla' => ['Cybertruck', 'Model 3', 'Model S', 'Model X', 'Model Y', 'Roadster'],
      'Toyota' => ['4Runner', 'Alphard', 'Auris', 'Avalon', 'Avensis', 'Aygo', 'BZ4X', 'C-HR', 'Camry', 'Carina', 'Celica', 'Corolla', 'Corolla Cross', 'Corolla Verso', 'Cressida', 'Crown', 'FJ', 'Fortuner', 'GT86', 'Harrier', 'Hiace', 'Highlander', 'Hilux', 'iQ', 'Land Cruiser', 'Lite-Ace', 'Matrix', 'Mirai II', 'MR2', 'Paseo', 'Picnic', 'Previa', 'Prius', 'Prius+', 'Proace', 'RAV4', 'Sequoia', 'Sienna', 'Starlet', 'Supra', 'Tacoma', 'Tercel', 'Tundra', 'Urban Cruiser', 'Venza', 'Verso', 'Yaris', 'Yaris Cross', ''],
      'Trabant' => ['1.1', '601', 'P 50'],
      'Triumph' => ['Acclaim', 'Dolomite', 'Spitfire', 'Stag', 'Toledo', 'TR3', 'TR4', 'TR5', 'TR6', 'TR7', 'TR8'],
      'TVR' => ['Cerbera', 'Chimaera', 'Griffith', 'S', 'Sagaris', 'Tamora', 'Tasmin', 'Tuscan', 'Vixen'],
      'Vauxhall' => ['Astra', 'Frontera', 'Omega', 'Vectra'],
      'Volkswagen' => ['181', 'Amarok', 'Arteon', 'Atlas', 'Beetle', 'Bora', 'Buggy', 'Caddy', 'California', 'Caravelle', 'Corrado', 'Crafter', 'e-Golf', 'Eos', 'Fox', 'Garbus', 'Golf', 'Golf Plus', 'Golf Sportsvan', 'ID.Buzz', 'ID.3', 'ID.4', 'ID.5', 'Iltis', 'Jetta', 'Kafer', 'Karmann Ghia', 'Lupo', 'Multivan', 'New Beetle', 'Passat', 'Passat Alltrack', 'Passat CC', 'Phaeton', 'Polo', 'Santana', 'Scirocco', 'Sharan', 'T-Cross', 'T-ROC', 'Taigo', 'Tiguan', 'Touareg', 'Touran', 'Transporter', 'up!', 'Vento'],
      'Volvo' => ['240', '340', '360', '440', '460', '480', '740', '760', '850', '940', '960', 'Amazon', 'C30', 'C40', 'C70', 'EX30', 'Polar', 'S40', 'S60', 'S70', 'S80', 'S90', 'V40', 'V50', 'V60', 'V70', 'V90', 'XC 40', 'XC 60', 'XC 70', 'XC 90'],
      'Warszawa' => ['203', '204', '223', '224', 'M-20', 'Pick-up'],
      'Xev' => ['Kitty', 'Yoyo'],
      'Yugo' => ['102', 'Florida', 'Koral'],
      'Zaporożec' => ['965', '968'],
      'Zastawa' => ['1100', '750'],
    ];

    foreach ($modelsByMarque as $marqueNom => $modeleNoms) {

      $marque = $this->getReference('mar-' . $this->i);
      $marqueId = $this->i;
      //var_dump("Marque ID : ".$marqueId); 
      

      foreach ($modeleNoms as $modeleNom) {
       
        $modele = new Modele();
        $modele->setNom($modeleNom);
        $modele->setMarque($marque);

        $manager->persist($modele);
        $this->addReference("mod-$this->i-" . $this->j, $modele);

        // Add debugging statement
        //var_dump("Modele Reference from modele: mod-".$this->i."-" . $this->j);

        $this->j++;
        $this->counter++;
        $this->k++;
      }
      $this->i++;
      $this->counter = 1;
    }
    $manager->flush();
  }

  public function getDependencies(): array
  {
    return [
      MarqueFixtures::class,
    ];
  }
}

-------------------------------------
Cale: src//DataFixtures/ServiceFixtures.php
Nume: ServiceFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Service;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;

class ServiceFixtures extends Fixture
{
    public function load(ObjectManager $manager): void
    {
            $service = new Service();
            $service->setTitre('Réparation de la carrosserie et de mécanique');
            $service->setDescription1('Bienvenue sur notre site dédié à la réparation de carrosserie et de mécanique automobile ! Chez nous, nous sommes fiers d\'offrir une gamme complète de services de réparation pour votre véhicule, qu\'il s\'agisse de redonner à votre carrosserie son éclat d\'origine ou de résoudre des problèmes mécaniques complexes.');
            $service->setDescription2('Notre équipe de professionnels expérimentés est spécialisée dans la réparation de carrosserie. Que votre voiture ait subi des dommages mineurs ou nécessite une réparation plus importante suite à une collision, nous sommes là pour restaurer son apparence et sa structure avec précision. Nous utilisons des techniques avancées et des matériaux de haute qualité pour garantir des résultats durables et esthétiquement impeccables.');
            $service->setDescription3('Contactez-nous dès aujourd\'hui pour prendre rendez-vous ou pour obtenir plus d\'informations sur nos services de réparation de carrosserie et de mécanique. Notre équipe amicale est là pour répondre à toutes vos questions et pour vous fournir des solutions adaptées à vos besoins. Faites confiance à notre expertise et redonnez à votre véhicule son état optimal !');
            $service->setImageName('carrepair-1-65c0545ac2a23427139470.jpg');
            $service->setImageSize(1087991);
            $service->setUpdatedAt(new \DateTimeImmutable());
            $service->setListeitem1('Réparation et remplacement de pièces de carrosserie');
            $service->setListeitem2('Débosselage, ponçage');
            $service->setListeitem3('Réparation moteur et boîte vitesses');
            $service->setListeitem4('Recherche de pannes mécaniques');
            $service->setListeitem5('Diagnostic embarqué toutes marques');
            $manager->persist($service);
              
            $service = new Service();
            $service->setTitre('Entretien régulier');
            $service->setDescription1('Chez nous, nous comprenons que votre voiture est un investissement précieux, et c\'est pourquoi nous proposons une gamme complète de services d\'entretien professionnel pour garantir son bon fonctionnement.');
            $service->setDescription2('Notre équipe qualifiée de techniciens automobiles expérimentés est là pour prendre soin de votre véhicule, qu\'il s\'agisse d\'une petite citadine, d\'un SUV familial ou d\'une voiture de sport. Nous nous engageons à fournir des services d\'entretien de qualité supérieure pour prolonger la durée de vie de votre voiture, améliorer sa performance et maintenir votre sécurité sur la route.');
            $service->setDescription3('N\'hésitez pas à nous contacter pour planifier un rendez-vous d\'entretien ou pour obtenir des informations supplémentaires sur nos services. Nous sommes là pour vous aider à prendre soin de votre véhicule et à garantir qu\'il fonctionne de manière optimale pour les années à venir. Faites confiance à notre expertise et laissez-nous prendre soin de votre voiture avec le plus grand soin.');
            $service->setImageName('carmaintenance1-65c054ae6bc9d567365674.jpg');
            $service->setImageSize(1139896);
            $service->setUpdatedAt(new \DateTimeImmutable());
            $service->setListeitem1('Entretien, révision, vidange');
            $service->setListeitem2('Climatisation (recharge, installation, détection de fuite)');
            $service->setListeitem3('Pré-contrôle technique');
            $service->setListeitem4('Diagnostic suspension-amortisseurs');
            $service->setListeitem5('Freins (plaquettes, disques, étriers)');
            $manager->persist($service);

        $manager->flush();
    }
}

-------------------------------------
Cale: src//DataFixtures/TemoignageFixtures.php
Nume: TemoignageFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Temoignage;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use Faker\Factory;


class TemoignageFixtures extends Fixture
{

    private $counter = 1;

    public function load(ObjectManager $manager): void
    {
        $faker = Factory::create('fr_FR');

      $names = [
        'Jhon Doe',
        'Daniel',
        'Sarah',
        'Jhony',
        'Raphaelle',
        'Paul',
    ];

        foreach ($names as $name){

          $temoignage = new Temoignage();
          $temoignage->setNom($name);
          $temoignage->setCommentaire($faker->text);
          $temoignage->setNote($faker->numberBetween(1, 5));
          $temoignage->setApprouve(true);
          $manager->persist($temoignage);

          $this->addReference('tem-'.$this->counter, $temoignage);
          $this->counter++;
        }

        $manager->flush();
    }
}
-------------------------------------
Cale: src//DataFixtures/TypeFixtures.php
Nume: TypeFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Type;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;


class TypeFixtures extends Fixture
{

    private $counter = 1;

    public function load(ObjectManager $manager): void
    {
      $types = [
        '4x4',
        'Berline',
        'Break',
        'Cabriolet',
        'Citadine',
        'Coupé',
        'Minibus',
        'Monospace',
        'Moto',
        'Pick-up',
        'Suv',
        'Voiture société',
    ];

        foreach ($types as $typeLibelle){

          $type = new Type();
          $type->setLibelle($typeLibelle);
          $manager->persist($type);

          $this->addReference('type-'.$this->counter, $type);
          $this->counter++;
        }

        $manager->flush();
    }
    
}
-------------------------------------
Cale: src//DataFixtures/VehiculeFixtures.php
Nume: VehiculeFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\DataFixtures\EmployesFixtures;
use App\Entity\Modele;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use Faker\Factory;
use App\Entity\Vehicule;
use App\Entity\VehiculeImage;
use App\Repository\ModeleRepository;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;

/**
 * Fixture class for populating the database with Vehicule entities.
 */
class VehiculeFixtures extends Fixture implements DependentFixtureInterface
{
  private $counter = 1;

  /**
   * Load method to create and persist Vehicule entities using Faker for randomized data.
   *
   * @param ObjectManager $manager The entity manager
   *
   * @return void
   */
  public function load(ObjectManager $manager): void
  {
    $faker = Factory::create('fr_FR');

    for ($i = 0; $i < 800; $i++) {
      // Create a new Vehicule entity
      $vehicule = new Vehicule();
      $vehicule->setPrix($faker->numberBetween(1000, 4000000));
      $vehicule->setAnnee($faker->numberBetween(1980, 2024));
      $vehicule->setKilometrage($faker->numberBetween(1000, 300000));
      $vehicule->setDescription($faker->text);
      $vehicule->setOptions($faker->text);
      $vehicule->setDateAjout(new \DateTime());
      $vehicule->setTitre($faker->word);

      // Set the Marque for the Vehicule using a random Marque reference
      $marque = $this->getReference('mar-' . rand(1, 120)); // Use rand() to get a random marque reference
      $vehicule->setMarque($marque);

      // Add debugging statement
      //var_dump("Marque ID & Marque : " . $marque->getId() . " " . $marque);

      // Get a random modele reference from the marque
      $modeleReference = $this->getRandomModeleReferenceForMarque($marque, $manager);


      //var_dump("Modele Reference: " . $modeleReference);

      // Get the Modele entity using the reference
      $modele = $this->getReference($modeleReference);

      // Add another debugging statement
      //var_dump("Modele ID: " . $modele->getId());

      // Set the modele for the vehicule
      $vehicule->setModele($modele);

      // Set other associations and properties for Vehicule
      $categorie = $this->getReference('cat-' . rand(1, 4));
      $vehicule->setCategorie($categorie);

      $carburant = $this->getReference('carb-' . rand(1, 6));
      $vehicule->setCarburant($carburant);

      $type = $this->getReference('type-' . rand(1, 12));
      $vehicule->setType($type);

      $employe = $this->getReference('empl-' . rand(1, 10));
      $vehicule->addEmploye($employe);

      // Persist the Vehicule entity
      $manager->persist($vehicule);
      $this->addReference('veh-' . $this->counter, $vehicule);
      $this->counter++;
    }

    // Flush the changes to the database
    $manager->flush();
  }

  /**
   * Get the dependencies for this fixture (other fixtures that should be loaded first).
   *
   * @return array
   */
  public function getDependencies(): array
  {
    return [
      MarqueFixtures::class,
      ModeleFixtures::class,
      CarburantFixtures::class,
      CategorieFixtures::class,
      TypeFixtures::class,
      EmployesFixtures::class,
    ];
  }

  /**
   * Get a random Modele reference for a given Marque.
   *
   * @param object      $marque  The Marque entity
   * @param ObjectManager $manager The entity manager
   *
   * @return string The reference key for a random Modele
   */
  private function getRandomModeleReferenceForMarque($marque, $manager)
  {
    $marqueId = $marque->getId();
    //var_dump("Marque ID: " . $marqueId);
    $matchingModeleReferences = $this->getReferencesByPrefix($manager, "mod-$marqueId-");
    if (empty($matchingModeleReferences)) {
      throw new \RuntimeException("No matching modele references found for marque with ID $marqueId");
    }

    return $matchingModeleReferences[array_rand($matchingModeleReferences)];
  }

  /**
   * Get references by a given prefix.
   *
   * @param ObjectManager $manager The entity manager
   * @param string        $prefix  The reference prefix
   *
   * @return array The array of references matching the given prefix
   */
  private function getReferencesByPrefix($manager, $prefix)
  {
    $references = [];
    $referenceRepository = $manager->getRepository(Modele::class);

    foreach ($referenceRepository->findAll() as $reference) {
      $key = $this->getReferenceKey($reference);
      //var_dump("Reference key Marque ID:" . $key);
      if (strpos($key, $prefix) === 0) {
        $references[] = $key;
      }
    }

    return $references;
  }

  /**
   * Get the reference key for the given entity.
   *
   * @param object $reference The entity for which the reference key is generated
   *
   * @return string The reference key
   */
  private function getReferenceKey($reference)
  {
    // Create a ReflectionClass instance for the given entity
    $reflClass = new \ReflectionClass($reference);

    // Assuming Marque is the owning side of the relationship, get the Marque ID
    $marqueId = $reference->getMarque()->getId();

    // Generate the reference key in the format "mod-$marqueId-<EntityId>"
    return "mod-$marqueId-" . $reference->getId();
  }
}

-------------------------------------
Cale: src//DataFixtures/VehiculeImageFixtures.php
Nume: VehiculeImageFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\DataFixtures\EmployesFixtures;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager; // Corrected namespace
use Faker\Factory;
use App\Entity\VehiculeImage;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;


class VehiculeImageFixtures extends Fixture implements DependentFixtureInterface
{   
    private $counter = 1;
    public function load(ObjectManager $manager): void
    {
        //$faker = Factory::create('fr_FR');

        for ($i = 0; $i < 800; $i++) {
            $vehiculeImage = new VehiculeImage();
            $vehiculeImage->setImageName('chiron-65c064afdac60846941615.jpeg');
            $vehiculeImage->setImageSize(67496);
            $vehiculeImage->setUpdatedAt(new \DateTimeImmutable()); 
            
            $vehicule = $this->getReference('veh-' . $this->counter);
            $vehiculeImage->setVehicule($vehicule); 

            $manager->persist($vehiculeImage);
            $this->addReference('vehImg-'.$this->counter, $vehiculeImage);
            $this->counter++;
        }

        $manager->flush();
    }
    public function getDependencies(): array
    {
        return [
            VehiculeFixtures::class,
        ];
    }
}


-------------------------------------
Cale: src//Entity/.gitignore
Nume: .gitignore
Continut:

-------------------------------------
Cale: src//Entity/Carburant.php
Nume: Carburant.php
Continut:
<?php

namespace App\Entity;

use App\Repository\CarburantRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: CarburantRepository::class)]
class Carburant
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    #[Groups(["getVehicules"])]
    private ?int $id = null;

    #[ORM\Column(length: 32, unique: true)]
    #[Groups(["getVehicules"])]
    private ?string $libelle = null;

    #[ORM\OneToMany(mappedBy: 'carburant', targetEntity: Vehicule::class)]
    private Collection $vehicules;

    public function __construct()
    {
        $this->vehicules = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->getLibelle();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getLibelle(): ?string
    {
        return $this->libelle;
    }

    public function setLibelle(string $libelle): static
    {
        $this->libelle = $libelle;

        return $this;
    }

    /**
     * @return Collection<int, Vehicule>
     */
    public function getVehicules(): Collection
    {
        return $this->vehicules;
    }

    public function addVehicule(Vehicule $vehicule): static
    {
        if (!$this->vehicules->contains($vehicule)) {
            $this->vehicules->add($vehicule);
            $vehicule->setCarburant($this);
        }

        return $this;
    }

    public function removeVehicule(Vehicule $vehicule): static
    {
        if ($this->vehicules->removeElement($vehicule)) {
            // set the owning side to null (unless already changed)
            if ($vehicule->getCarburant() === $this) {
                $vehicule->setCarburant(null);
            }
        }

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Categorie.php
Nume: Categorie.php
Continut:
<?php

namespace App\Entity;

use App\Repository\CategorieRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: CategorieRepository::class)]
class Categorie
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    #[Groups(["getVehicules"])]
    private ?int $id = null;

    #[ORM\Column(length: 32, unique: true)]
    #[Groups(["getVehicules"])]
    private ?string $libelle = null;

    #[ORM\OneToMany(mappedBy: 'categorie', targetEntity: Vehicule::class)]
    private Collection $vehicules;

    public function __construct()
    {
        $this->vehicules = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->getLibelle();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getLibelle(): ?string
    {
        return $this->libelle;
    }

    public function setLibelle(string $libelle): static
    {
        $this->libelle = $libelle;

        return $this;
    }

    /**
     * @return Collection<int, Vehicule>
     */
    public function getVehicules(): Collection
    {
        return $this->vehicules;
    }

    public function addVehicule(Vehicule $vehicule): static
    {
        if (!$this->vehicules->contains($vehicule)) {
            $this->vehicules->add($vehicule);
            $vehicule->setCategorie($this);
        }

        return $this;
    }

    public function removeVehicule(Vehicule $vehicule): static
    {
        if ($this->vehicules->removeElement($vehicule)) {
            // set the owning side to null (unless already changed)
            if ($vehicule->getCategorie() === $this) {
                $vehicule->setCategorie(null);
            }
        }

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Contact.php
Nume: Contact.php
Continut:
<?php

namespace App\Entity;

use App\Repository\ContactRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ContactRepository::class)]
class Contact
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\Column(length: 100)]
    private ?string $nom = null;

    #[ORM\Column(length: 100)]
    private ?string $prenom = null;

    #[ORM\Column(length: 255)]
    private ?string $email = null;

    #[ORM\Column(length: 20)]
    private ?string $tel = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $message = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $Date_envoi = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNom(): ?string
    {
        return $this->nom;
    }

    public function setNom(string $nom): static
    {
        $this->nom = $nom;

        return $this;
    }

    public function getPrenom(): ?string
    {
        return $this->prenom;
    }

    public function setPrenom(string $prenom): static
    {
        $this->prenom = $prenom;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): static
    {
        $this->email = $email;

        return $this;
    }

    public function getTel(): ?string
    {
        return $this->tel;
    }

    public function setTel(string $tel): static
    {
        $this->tel = $tel;

        return $this;
    }

    public function getMessage(): ?string
    {
        return $this->message;
    }

    public function setMessage(string $message): static
    {
        $this->message = $message;

        return $this;
    }

    public function getDateEnvoi(): ?\DateTimeInterface
    {
        return $this->Date_envoi;
    }

    public function setDateEnvoi(\DateTimeInterface $Date_envoi): static
    {
        $this->Date_envoi = $Date_envoi;

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Employes.php
Nume: Employes.php
Continut:
<?php

namespace App\Entity;

use App\Repository\EmployesRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Constraints\PasswordStrength;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: EmployesRepository::class)]
class Employes implements UserInterface, PasswordAuthenticatedUserInterface
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    #[Groups(["getVehicules"])]
    private ?int $id = null;

    #[ORM\Column(length: 100)]
    //#[Groups(["getVehicules"])]
    #[Assert\Regex(
        pattern: "/^[a-zA-Z '.-]*[A-Za-z][^-]$/",
        match: true,
        message: 'Votre nom ne peut pas contenir des nombres et/ou des caractères spéciaux',
    )]
    private ?string $nom = null;

    #[ORM\Column(length: 100)]
    #[Groups(["getVehicules"])]
    #[Assert\Regex(
        pattern: "/^[a-zA-Z '.-]*[A-Za-z][^-]$/",
        match: true,
        message: 'Votre prenom ne peut pas contenir des nombres et/ou des caractères spéciaux',
    )]
    private ?string $prenom = null;

    #[ORM\Column(length: 180, unique: true)]
    #[Groups(["getVehicules"])]
    #[Assert\Email(
        message: 'The email {{ value }} is not a valid email.',
    )]
    private ?string $email = null;

    #[ORM\Column]
    private array $roles = ["ROLE_EMPLOYE"];

    #[ORM\Column]
    #[Groups(["getVehicules"])]
    private ?\DateTimeImmutable $DateCreation = null;

    /**
     * @var string The hashed password
     */
    #[ORM\Column]
    /*#[Assert\PasswordStrength([
        'minScore' => PasswordStrength::STRENGTH_STRONG,
    ])]*/
    #[Assert\Regex(
        pattern: '/^(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/',
        message: 'Password must be at least 8 characters long and include at least one uppercase letter, one digit, and one special character.'
    )]
    private ?string $password = null;

    #[ORM\ManyToMany(targetEntity: Vehicule::class, mappedBy: 'employe')]
    private Collection $vehicules;

    #[ORM\ManyToMany(targetEntity: Temoignage::class, mappedBy: 'employe')]
    private Collection $temoignages;

    public function __construct()
    {
        $this->DateCreation = new \DateTimeImmutable();
        $this->vehicules = new ArrayCollection();
        $this->temoignages = new ArrayCollection();
    }
    
    public function __toString(): string
    {
        //return $this->getPrenom(). ' - '. $this->getNom();
        return $this->getEmail();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNom(): ?string
    {
        return $this->nom;
    }

    public function setNom(string $nom): static
    {
        $this->nom = $nom;

        return $this;
    }

    public function getPrenom(): ?string
    {
        return $this->prenom;
    }

    public function setPrenom(string $prenom): static
    {
        $this->prenom = $prenom;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): static
    {
        $this->email = $email;

        return $this;
    }

    /**
     * A visual identifier that represents this user.
     *
     * @see UserInterface
     */
    public function getUserIdentifier(): string
    {
        return (string) $this->email;
    }

    /**
     * @see UserInterface
     */
    public function getRoles(): array
    {
        $roles = $this->roles;
        // guarantee every user at least has ROLE_USER
        //$roles[] = 'ROLE_USER';

        return array_unique($roles);
    }

    public function setRoles(array $roles): static
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * @see PasswordAuthenticatedUserInterface
     */
    public function getPassword(): string
    {
        return $this->password;
    }

    public function setPassword(string $password): static
    {
        $this->password = $password;

        return $this;
    }

    public function getDateCreation(): ?\DateTimeImmutable
    {
        return $this->DateCreation;
    }

    public function setDateCreation(\DateTimeImmutable $DateCreation): static
    {
        $this->DateCreation = $DateCreation;

        return $this;
    }

    /**
     * @see UserInterface
     */
    public function eraseCredentials(): void
    {
        // If you store any temporary, sensitive data on the user, clear it here
        // $this->plainPassword = null;
    }

    /**
     * @return Collection<int, Vehicule>
     */
    public function getVehicules(): Collection
    {
        return $this->vehicules;
    }

    public function addVehicule(Vehicule $vehicule): static
    {
        if (!$this->vehicules->contains($vehicule)) {
            $this->vehicules->add($vehicule);
            $vehicule->addEmploye($this);
        }

        return $this;
    }

    public function removeVehicule(Vehicule $vehicule): static
    {
        if ($this->vehicules->removeElement($vehicule)) {
            $vehicule->removeEmploye($this);
        }

        return $this;
    }

    /**
     * @return Collection<int, Temoignage>
     */
    public function getTemoignages(): Collection
    {
        return $this->temoignages;
    }

    public function addTemoignage(Temoignage $temoignage): static
    {
        if (!$this->temoignages->contains($temoignage)) {
            $this->temoignages->add($temoignage);
            $temoignage->addEmploye($this);
        }

        return $this;
    }

    public function removeTemoignage(Temoignage $temoignage): static
    {
        if ($this->temoignages->removeElement($temoignage)) {
            $temoignage->removeEmploye($this);
        }

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Horaire.php
Nume: Horaire.php
Continut:
<?php

namespace App\Entity;

use App\Repository\HoraireRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: HoraireRepository::class)]
class Horaire
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\Column(length: 100)]
    private ?string $jour = null;

    #[ORM\Column(length: 40)]
    private ?string $ouverture_matin = null;

    #[ORM\Column(length: 40, nullable: true)]
    private ?string $fermeture_midi = null;

    #[ORM\Column(length: 40, nullable: true)]
    private ?string $ouverture_apres_midi = null;

    #[ORM\Column(length: 40, nullable: true)]
    private ?string $fermeture_soir = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getJour(): ?string
    {
        return $this->jour;
    }

    public function setJour(string $jour): static
    {
        $this->jour = $jour;

        return $this;
    }

    public function getOuvertureMatin(): ?string
    {
        return $this->ouverture_matin;
    }

    public function setOuvertureMatin(string $ouverture_matin): static
    {
        $this->ouverture_matin = $ouverture_matin;

        return $this;
    }

    public function getFermetureMidi(): ?string
    {
        return $this->fermeture_midi;
    }

    public function setFermetureMidi(string $fermeture_midi): static
    {
        $this->fermeture_midi = $fermeture_midi;

        return $this;
    }

    public function getOuvertureApresMidi(): ?string
    {
        return $this->ouverture_apres_midi;
    }

    public function setOuvertureApresMidi(?string $ouverture_apres_midi): static
    {
        $this->ouverture_apres_midi = $ouverture_apres_midi;

        return $this;
    }

    public function getFermetureSoir(): ?string
    {
        return $this->fermeture_soir;
    }

    public function setFermetureSoir(?string $fermeture_soir): static
    {
        $this->fermeture_soir = $fermeture_soir;

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Marque.php
Nume: Marque.php
Continut:
<?php

namespace App\Entity;

use App\Repository\MarqueRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: MarqueRepository::class)]
class Marque
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    #[Groups(["getVehicules"])]
    private ?int $id = null;

    #[ORM\Column(length: 40, unique: true)]
    #[Groups(["getVehicules"])]
    private ?string $nom = null;

    #[ORM\OneToMany(mappedBy: 'marque', targetEntity: Modele::class)]
    private Collection $modeles;

    #[ORM\OneToMany(mappedBy: 'marque', targetEntity: Vehicule::class)]
    private Collection $vehicules;

    public function __construct()
    {
        $this->modeles = new ArrayCollection();
        $this->vehicules = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->getNom();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNom(): ?string
    {
        return $this->nom;
    }

    public function setNom(string $nom): static
    {
        $this->nom = $nom;

        return $this;
    }

    /**
     * @return Collection<int, Modele>
     */
    public function getModeles(): Collection
    {
        return $this->modeles;
    }

    public function addModele(Modele $modele): static
    {
        if (!$this->modeles->contains($modele)) {
            $this->modeles->add($modele);
            $modele->setMarque($this);
        }

        return $this;
    }

    public function removeModele(Modele $modele): static
    {
        if ($this->modeles->removeElement($modele)) {
            // set the owning side to null (unless already changed)
            if ($modele->getMarque() === $this) {
                $modele->setMarque(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, Vehicule>
     */
    public function getVehicules(): Collection
    {
        return $this->vehicules;
    }

    public function addVehicule(Vehicule $vehicule): static
    {
        if (!$this->vehicules->contains($vehicule)) {
            $this->vehicules->add($vehicule);
            $vehicule->setMarque($this);
        }

        return $this;
    }

    public function removeVehicule(Vehicule $vehicule): static
    {
        if ($this->vehicules->removeElement($vehicule)) {
            // set the owning side to null (unless already changed)
            if ($vehicule->getMarque() === $this) {
                $vehicule->setMarque(null);
            }
        }

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Modele.php
Nume: Modele.php
Continut:
<?php

namespace App\Entity;

use App\Repository\ModeleRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: ModeleRepository::class)]
class Modele
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    #[Groups(["getVehicules"])]
    private ?int $id = null;

    #[ORM\Column(length: 50)]
    #[Groups(["getVehicules"])]
    private ?string $nom = null;

    #[ORM\ManyToOne(inversedBy: 'modeles')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Marque $marque = null;

    #[ORM\OneToMany(mappedBy: 'modele', targetEntity: Vehicule::class)]
    private Collection $vehicules;

    public function __construct()
    {
        $this->vehicules = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->getNom();
        //return $this->getMarque(). ' - '. $this->getNom();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNom(): ?string
    {
        return $this->nom;
    }

    public function setNom(string $nom): static
    {
        $this->nom = $nom;

        return $this;
    }

    public function getMarque(): ?Marque
    {
        return $this->marque;
    }

    public function setMarque(?Marque $marque): static
    {
        $this->marque = $marque;

        return $this;
    }

    /**
     * @return Collection<int, Vehicule>
     */
    public function getVehicules(): Collection
    {
        return $this->vehicules;
    }

    public function addVehicule(Vehicule $vehicule): static
    {
        if (!$this->vehicules->contains($vehicule)) {
            $this->vehicules->add($vehicule);
            $vehicule->setModele($this);
        }

        return $this;
    }

    public function removeVehicule(Vehicule $vehicule): static
    {
        if ($this->vehicules->removeElement($vehicule)) {
            // set the owning side to null (unless already changed)
            if ($vehicule->getModele() === $this) {
                $vehicule->setModele(null);
            }
        }

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Service.php
Nume: Service.php
Continut:
<?php

namespace App\Entity;

use App\Repository\ServiceRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\File;
use Vich\UploaderBundle\Mapping\Annotation as Vich;

#[ORM\Entity(repositoryClass: ServiceRepository::class)]
#[Vich\Uploadable]
class Service
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\Column(length: 100)]
    private ?string $titre = null;

    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private ?string $description1 = null;

    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private ?string $description2 = null;

    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private ?string $description3 = null;

    #[ORM\Column(length: 100, nullable: true)]
    private ?string $listeitem1 = null;

    #[ORM\Column(length: 100, nullable: true)]
    private ?string $listeitem2 = null;

    #[ORM\Column(length: 100, nullable: true)]
    private ?string $listeitem3 = null;

    #[ORM\Column(length: 100, nullable: true)]
    private ?string $listeitem4 = null;

    #[ORM\Column(length: 100, nullable: true)]
    private ?string $listeitem5 = null;

    // NOTE: This is not a mapped field of entity metadata, just a simple property.
    #[Vich\UploadableField(mapping: 'services', fileNameProperty: 'imageName', size: 'imageSize')]
    private ?File $imageFile = null;

    #[ORM\Column(nullable: true)]
    private ?string $imageName = null;

    #[ORM\Column(nullable: true)]
    private ?int $imageSize = null;

    #[ORM\Column(nullable: true)]
    private ?\DateTimeImmutable $updatedAt = null;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile|null $imageFile
     */
    public function setImageFile(?File $imageFile = null): void
    {
        $this->imageFile = $imageFile;

        if (null !== $imageFile) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
        }
    }

    public function getImageFile(): ?File
    {
        return $this->imageFile;
    }

    public function setImageName(?string $imageName): void
    {
        $this->imageName = $imageName;
    }

    public function getImageName(): ?string
    {
        return $this->imageName;
    }

    public function setImageSize(?int $imageSize): void
    {
        $this->imageSize = $imageSize;
    }

    public function getImageSize(): ?int
    {
        return $this->imageSize;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): static
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getTitre(): ?string
    {
        return $this->titre;
    }

    public function setTitre(string $titre): static
    {
        $this->titre = $titre;

        return $this;
    }

    public function getDescription1(): ?string
    {
        return $this->description1;
    }

    public function setDescription1(?string $description1): static
    {
        $this->description1 = $description1;

        return $this;
    }

    public function getDescription2(): ?string
    {
        return $this->description2;
    }

    public function setDescription2(?string $description2): static
    {
        $this->description2 = $description2;

        return $this;
    }

    public function getDescription3(): ?string
    {
        return $this->description3;
    }

    public function setDescription3(?string $description3): static
    {
        $this->description3 = $description3;

        return $this;
    }

    public function getListeitem1(): ?string
    {
        return $this->listeitem1;
    }

    public function setListeitem1(?string $listeitem1): static
    {
        $this->listeitem1 = $listeitem1;

        return $this;
    }

    public function getListeitem2(): ?string
    {
        return $this->listeitem2;
    }

    public function setListeitem2(?string $listeitem2): static
    {
        $this->listeitem2 = $listeitem2;

        return $this;
    }

    public function getListeitem3(): ?string
    {
        return $this->listeitem3;
    }

    public function setListeitem3(?string $listeitem3): static
    {
        $this->listeitem3 = $listeitem3;

        return $this;
    }

    public function getListeitem4(): ?string
    {
        return $this->listeitem4;
    }

    public function setListeitem4(?string $listeitem4): static
    {
        $this->listeitem4 = $listeitem4;

        return $this;
    }

    public function getListeitem5(): ?string
    {
        return $this->listeitem5;
    }

    public function setListeitem5(?string $listeitem5): static
    {
        $this->listeitem5 = $listeitem5;

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Temoignage.php
Nume: Temoignage.php
Continut:
<?php

namespace App\Entity;

use App\Repository\TemoignageRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

#[ORM\Entity(repositoryClass: TemoignageRepository::class)]
class Temoignage
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\Column(length: 100)]
    private ?string $Nom = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $Commentaire = null;

    #[ORM\Column]
    #[Assert\Regex(
        pattern: "/[1-5]/",
        match: true,
        message: 'La note doit etre un numero entre 1 et 5',
    )]
    private ?int $Note = null;

    #[ORM\Column]
    private ?bool $Approuve = null;

    #[ORM\Column]
    private ?\DateTimeImmutable $updatedAt = null;

    #[ORM\ManyToMany(targetEntity: Employes::class, inversedBy: 'temoignages')]
    private Collection $employe;

    public function __construct()
    {
        $this->updatedAt = new \DateTimeImmutable();
        $this->employe = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNom(): ?string
    {
        return $this->Nom;
    }

    public function setNom(string $Nom): static
    {
        $this->Nom = $Nom;

        return $this;
    }

    public function getCommentaire(): ?string
    {
        return $this->Commentaire;
    }

    public function setCommentaire(string $Commentaire): static
    {
        $this->Commentaire = $Commentaire;

        return $this;
    }

    public function getNote(): ?int
    {
        return $this->Note;
    }

    public function setNote(int $Note): static
    {
        $this->Note = $Note;

        return $this;
    }

    public function isApprouve(): ?bool
    {
        return $this->Approuve;
    }

    public function setApprouve(bool $Approuve): static
    {
        $this->Approuve = $Approuve;

        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(\DateTimeImmutable $updatedAt): static
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * @return Collection<int, Employes>
     */
    public function getEmploye(): Collection
    {
        return $this->employe;
    }

    public function addEmploye(Employes $employe): static
    {
        if (!$this->employe->contains($employe)) {
            $this->employe->add($employe);
            $employe->addTemoignage($this);
        }

        return $this;
    }

    public function removeEmploye(Employes $employe): static
    {
        $this->employe->removeElement($employe);

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Type.php
Nume: Type.php
Continut:
<?php

namespace App\Entity;

use App\Repository\TypeRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: TypeRepository::class)]
class Type
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    #[Groups(["getVehicules"])]
    private ?int $id = null;

    #[ORM\Column(length: 32, unique: true)]
    #[Groups(["getVehicules"])]
    private ?string $libelle = null;

    #[ORM\OneToMany(mappedBy: 'type', targetEntity: Vehicule::class)]
    private Collection $vehicules;

    public function __construct()
    {
        $this->vehicules = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->getLibelle();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getLibelle(): ?string
    {
        return $this->libelle;
    }

    public function setLibelle(string $libelle): static
    {
        $this->libelle = $libelle;

        return $this;
    }

    /**
     * @return Collection<int, Vehicule>
     */
    public function getVehicules(): Collection
    {
        return $this->vehicules;
    }

    public function addVehicule(Vehicule $vehicule): static
    {
        if (!$this->vehicules->contains($vehicule)) {
            $this->vehicules->add($vehicule);
            $vehicule->setType($this);
        }

        return $this;
    }

    public function removeVehicule(Vehicule $vehicule): static
    {
        if ($this->vehicules->removeElement($vehicule)) {
            // set the owning side to null (unless already changed)
            if ($vehicule->getType() === $this) {
                $vehicule->setType(null);
            }
        }

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Vehicule.php
Nume: Vehicule.php
Continut:
<?php

namespace App\Entity;

use App\Repository\VehiculeRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Vich\UploaderBundle\Mapping\Annotation as Vich;
use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: VehiculeRepository::class)]
#[Vich\Uploadable]
class Vehicule
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    #[Groups(["getVehicules"])]
    private ?int $id = null;

    #[ORM\ManyToOne(inversedBy: 'vehicules')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(["getVehicules"])]
    private ?Marque $marque = null;

    #[ORM\ManyToOne(inversedBy: 'vehicules')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(["getVehicules"])]
    private ?Modele $modele = null;

    #[ORM\Column(length: 255)]
    #[Groups(["getVehicules"])]
    #[Assert\Length(max: 255)]
    private ?string $titre = null;

    #[ORM\Column]
    #[Groups(["getVehicules"])]
    #[Assert\Regex(
        pattern: "/[0-9]/",
        match: true,
        message: 'Le prix ne peut pas contenir des lettres et/ou des caractères spéciaux',
    )]
    private ?int $prix = null;

    #[ORM\Column]
    #[Groups(["getVehicules"])]
    #[Assert\Range(
      min: 1970,
      max: 2024,
      notInRangeMessage: 'L\'année doit être comprise entre {{ min }} et {{ max }}.'
    )]
    private ?int $annee = null;

    #[ORM\Column]
    #[Groups(["getVehicules"])]
    private ?int $kilometrage = null;

    #[ORM\Column(type: Types::TEXT)]
    #[Groups(["getVehicules"])]
    private ?string $description = null;

    #[ORM\Column(type: Types::TEXT, nullable: true)]
    #[Groups(["getVehicules"])]
    private ?string $options = null;

    #[ORM\ManyToOne(inversedBy: 'vehicules')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(["getVehicules"])]
    private ?Categorie $categorie = null;

    #[ORM\ManyToOne(inversedBy: 'vehicules')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(["getVehicules"])]
    private ?Type $type = null;

    #[ORM\ManyToOne(inversedBy: 'vehicules')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(["getVehicules"])]
    private ?Carburant $carburant = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    #[Groups(["getVehicules"])]
    private ?\DateTimeInterface $Date_Ajout = null;
    
    #[ORM\ManyToMany(targetEntity: Employes::class, inversedBy: 'vehicules')]
    #[Groups(["getVehicules"])]
    private Collection $employe;

    #[ORM\OneToMany(mappedBy: 'vehicule', targetEntity: VehiculeImage::class, cascade: ['persist'], orphanRemoval: true)]
    #[Groups(["getVehicules"])]
    private Collection $images;

    

    public function __construct()
    {
        $this->Date_Ajout = new \DateTime();
        $this->employe = new ArrayCollection();
        $this->images = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->getModele();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPrix(): ?int
    {
        return $this->prix;
    }

    public function setPrix(int $prix): static
    {
        $this->prix = $prix;

        return $this;
    }

    public function getAnnee(): ?int
    {
        return $this->annee;
    }

    public function setAnnee(int $annee): static
    {
        $this->annee = $annee;

        return $this;
    }

    public function getKilometrage(): ?int
    {
        return $this->kilometrage;
    }

    public function setKilometrage(int $kilometrage): static
    {
        $this->kilometrage = $kilometrage;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    public function getOptions(): ?string
    {
        return $this->options;
    }

    public function setOptions(?string $options): static
    {
        $this->options = $options;

        return $this;
    }

    public function getCategorie(): ?Categorie
    {
        return $this->categorie;
    }

    public function setCategorie(?Categorie $categorie): static
    {
        $this->categorie = $categorie;

        return $this;
    }

    public function getType(): ?Type
    {
        return $this->type;
    }

    public function setType(?Type $type): static
    {
        $this->type = $type;

        return $this;
    }

    public function getCarburant(): ?Carburant
    {
        return $this->carburant;
    }

    public function setCarburant(?Carburant $carburant): static
    {
        $this->carburant = $carburant;

        return $this;
    }

    public function getDateAjout(): ?\DateTimeInterface
    {
        return $this->Date_Ajout;
    }

    public function setDateAjout(\DateTimeInterface $Date_Ajout): static
    {
        $this->Date_Ajout = $Date_Ajout;

        return $this;
    }

    public function getModele(): ?Modele
    {
        return $this->modele;
    }

    public function setModele(?Modele $modele): static
    {
        $this->modele = $modele;

        return $this;
    }

    /**
     * @return Collection<int, Employes>
     */
    public function getEmploye(): Collection
    {
        return $this->employe;
    }

    public function addEmploye(Employes $employe): static
    {
        if (!$this->employe->contains($employe)) {
            $this->employe->add($employe);
        }

        return $this;
    }

    public function removeEmploye(Employes $employe): static
    {
        $this->employe->removeElement($employe);

        return $this;
    }

    public function getTitre(): ?string
    {
        return $this->titre;
    }

    public function setTitre(string $titre): static
    {
        $this->titre = $titre;

        return $this;
    }

    public function getMarque(): ?Marque
    {
        return $this->marque;
    }

    public function setMarque(?Marque $marque): static
    {
        $this->marque = $marque;

        return $this;
    }

    /**
     * @return Collection<int, VehiculeImage>
     */
    public function getImages(): Collection
    {
        return $this->images;
    }

    public function addImage(VehiculeImage $image): static
    {
        if (!$this->images->contains($image)) {
            $this->images->add($image);
            $image->setVehicule($this);
        }

        return $this;
    }

    public function removeImage(VehiculeImage $image): static
    {
        if ($this->images->removeElement($image)) {
            // set the owning side to null (unless already changed)
            if ($image->getVehicule() === $this) {
                $image->setVehicule(null);
            }
        }

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/VehiculeImage.php
Nume: VehiculeImage.php
Continut:
<?php

namespace App\Entity;


use App\Entity\Vehicule;
use App\Repository\VehiculeImageRepository;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\HttpFoundation\File\File;
use Vich\UploaderBundle\Mapping\Annotation as Vich;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: VehiculeImageRepository::class)]
#[Vich\Uploadable]
class VehiculeImage
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    #[Groups(["getVehicules"])]
    private ?int $id = null;

    #[Vich\UploadableField(mapping: 'vehicules', fileNameProperty: 'imageName', size: 'imageSize')]
    private ?File $imageFile = null;

    #[ORM\Column(nullable: true)]
    #[Groups(["getVehicules"])]
    private ?string $imageName = null;

    #[ORM\Column(nullable: true)]
    private ?int $imageSize = null;

    #[ORM\Column(nullable: true)]
    private ?\DateTimeImmutable $updatedAt = null;

    #[ORM\ManyToOne(inversedBy: 'images')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Vehicule $vehicule = null;

     /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile|null $imageFile
     */
    public function setImageFile(?File $imageFile): self
    {
        $this->imageFile = $imageFile;

        if (null !== $imageFile) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
        }

        return $this;
    }

    public function getImageFile(): ?File
    {
        return $this->imageFile;
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function setImageName(?string $imageName): static
    {
        $this->imageName = $imageName;

        return $this;
    }

    public function getImageName(): ?string
    {
        return $this->imageName;
    }

    public function setImageSize(?int $imageSize): static
    {
        $this->imageSize = $imageSize;

        return $this;
    }

    public function getImageSize(): ?int
    {
        return $this->imageSize;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): static
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }
    
    /*public function __toString(): string
    {
        return $this->getImageName();
    }*/

    public function getVehicule(): ?Vehicule
    {
        return $this->vehicule;
    }

    public function setVehicule(?Vehicule $vehicule): static
    {
        $this->vehicule = $vehicule;

        return $this;
    }
}

-------------------------------------
Cale: src//EventListener/CoreSubscriber.php
Nume: CoreSubscriber.php
Continut:
<?php

namespace App\EventListener\HttpKernel;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\HttpKernel\Event\ResponseEvent;

class CorsSubscriber implements EventSubscriberInterface
{

    public static function getSubscribedEvents(): array
    {
        return [
            KernelEvents::RESPONSE => 'onResponse'
        ];
    }

    public function onResponse(ResponseEvent $event)
    {
        $response = $event->getResponse();
        $response->headers->set('Access-Control-Allow-Origin', '*');
    }

}
-------------------------------------
Cale: src//Form/ContactType.php
Nume: ContactType.php
Continut:
<?php

namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TelType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

class ContactType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('nom',TextType::class, [
                'label' => 'Nom:',
            ])
            ->add('prenom',TextType::class, [
                'label' => 'Prénom:',
            ])
            ->add('email',EmailType::class, [
                'label' => 'E-mail:',
            ])
            ->add('tel',TelType::class, [
                'label' => 'Numéro de téléphone:',
            ])
            ->add('message', TextareaType::class, [
                'label' => 'Message:',
                'attr' => ['rows' => 5],
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            // Configure your form options here
        ]);
    }
}

-------------------------------------
Cale: src//Form/ContactType.txt
Nume: ContactType.txt
Continut:
<?php

namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TelType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class ContactType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('nom',TextType::class, [
                'label' => 'Nom:',
            ])
            ->add('prenom',TextType::class, [
                'label' => 'Prénom:',
            ])
            ->add('email',EmailType::class, [
                'label' => 'E-mail:',
            ])
            ->add('tel',TelType::class, [
                'label' => 'Numéro de téléphone:',
            ])
            ->add('message', TextareaType::class, [
                'label' => 'Message:',
                'attr' => ['rows' => 5],
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            // Configure your form options here
        ]);
    }
}
-------------------------------------
Cale: src//Form/SearchForm.php
Nume: SearchForm.php
Continut:
<?php

namespace App\Form;

use App\Data\SearchData;
use App\Entity\Marque;
use App\Entity\Categorie;
use App\Entity\Type;
use App\Entity\Carburant;
use App\Entity\Modele;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class SearchForm extends AbstractType
{

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('prixmin', NumberType::class, [
                'label' => false,
                'required' => false,
                'attr' => [
                    'placeholder' => 'Prix min'
                ]
            ])
            ->add('prixmax', NumberType::class, [
                'label' => false,
                'required' => false,
                'attr' => [
                    'placeholder' => 'Prix max'
                ]
            ])
            ->add('kmmin', NumberType::class, [
                'label' => false,
                'required' => false,
                'attr' => [
                    'placeholder' => 'Km min'
                ]
            ])
            ->add('kmmax', NumberType::class, [
                'label' => false,
                'required' => false,
                'attr' => [
                    'placeholder' => 'Km max'
                ]
            ])
            ->add('anneemin', NumberType::class, [
                'label' => false,
                'required' => false,
                'attr' => [
                    'placeholder' => 'Année min'
                ]
            ])
            ->add('anneemax', NumberType::class, [
                'label' => false,
                'required' => false,
                'attr' => [
                    'placeholder' => 'Année max'
                ]
            ])
            ->add('marque', EntityType::class, [
                'label' => false,
                'required' => false,
                'class' => Marque::class,
                'expanded' => false,
                'multiple' => true
            ])
            ->add('modele', EntityType::class, [
              'label' => false,
              'required' => false,
              'class' => Modele::class,
              'expanded' => false,
              'multiple' => true
          ])
            ->add('categorie', EntityType::class, [
                'label' => false,
                'required' => false,
                'class' => Categorie::class,
                'expanded' => true,
                'multiple' => true
            ])
            ->add('type', EntityType::class, [
                'label' => false,
                'required' => false,
                'class' => Type::class,
                'expanded' => true,
                'multiple' => true
            ])
            ->add('carburant', EntityType::class, [
                'label' => false,
                'required' => false,
                'class' => Carburant::class,
                'expanded' => true,
                'multiple' => true
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => SearchData::class,
            'method' => 'GET',
            'csrf_protection' => false
        ]);
    }

    public function getBlockPrefix()
    {
        return '';
    }

}
-------------------------------------
Cale: src//Form/TemoignageType.php
Nume: TemoignageType.php
Continut:
<?php

namespace App\Form;

use Doctrine\Common\Collections\Expr\Value;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;

class TemoignageType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('nom', TextType::class, [
                'label' => 'Nom:',
            ])
            ->add('commentaire', TextareaType::class, [
                'label' => 'Message:',
                'attr' => ['rows' => 5, 'max' => 500],
                'required' => 'true',
            ])
            ->add('note', IntegerType::class, [
                'label' => 'Note:',
                'attr' => ['min' => 1, 'max' => 5],
            ])
        ;
    }
}
-------------------------------------
Cale: src//Form/Type/VehiculeImageType.php
Nume: VehiculeImageType.php
Continut:
<?php

namespace App\Form\Type;

use App\Entity\VehiculeImage;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Vich\UploaderBundle\Form\Type\VichFileType;

class VehiculeImageType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
       $builder->add('imageFile', VichFileType::class, [
        'label' => 'Image',
       ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => VehiculeImage::class
        ]);
    }
}
-------------------------------------
Cale: src//Kernel.php
Nume: Kernel.php
Continut:
<?php

namespace App;

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;
}

-------------------------------------
Cale: src//Repository/.gitignore
Nume: .gitignore
Continut:

-------------------------------------
Cale: src//Repository/CarburantRepository.php
Nume: CarburantRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Carburant;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Carburant>
 *
 * @method Carburant|null find($id, $lockMode = null, $lockVersion = null)
 * @method Carburant|null findOneBy(array $criteria, array $orderBy = null)
 * @method Carburant[]    findAll()
 * @method Carburant[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CarburantRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Carburant::class);
    }

//    /**
//     * @return Carburant[] Returns an array of Carburant objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Carburant
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/CategorieRepository.php
Nume: CategorieRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Categorie;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Categorie>
 *
 * @method Categorie|null find($id, $lockMode = null, $lockVersion = null)
 * @method Categorie|null findOneBy(array $criteria, array $orderBy = null)
 * @method Categorie[]    findAll()
 * @method Categorie[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CategorieRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Categorie::class);
    }

//    /**
//     * @return Categorie[] Returns an array of Categorie objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Categorie
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/ContactRepository.php
Nume: ContactRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Contact;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Contact>
 *
 * @method Contact|null find($id, $lockMode = null, $lockVersion = null)
 * @method Contact|null findOneBy(array $criteria, array $orderBy = null)
 * @method Contact[]    findAll()
 * @method Contact[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ContactRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Contact::class);
    }

//    /**
//     * @return Contact[] Returns an array of Contact objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Contact
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/EmployesRepository.php
Nume: EmployesRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Employes;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;

/**
 * @extends ServiceEntityRepository<Employes>
 *
 * @implements PasswordUpgraderInterface<Employes>
 *
 * @method Employes|null find($id, $lockMode = null, $lockVersion = null)
 * @method Employes|null findOneBy(array $criteria, array $orderBy = null)
 * @method Employes[]    findAll()
 * @method Employes[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class EmployesRepository extends ServiceEntityRepository implements PasswordUpgraderInterface
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Employes::class);
    }

    /**
     * Used to upgrade (rehash) the user's password automatically over time.
     */
    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
    {
        if (!$user instanceof Employes) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $user::class));
        }

        $user->setPassword($newHashedPassword);
        $this->getEntityManager()->persist($user);
        $this->getEntityManager()->flush();
    }

//    /**
//     * @return Employes[] Returns an array of Employes objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('e')
//            ->andWhere('e.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('e.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Employes
//    {
//        return $this->createQueryBuilder('e')
//            ->andWhere('e.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/HoraireRepository.php
Nume: HoraireRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Horaire;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Horaire>
 *
 * @method Horaire|null find($id, $lockMode = null, $lockVersion = null)
 * @method Horaire|null findOneBy(array $criteria, array $orderBy = null)
 * @method Horaire[]    findAll()
 * @method Horaire[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class HoraireRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Horaire::class);
    }

//    /**
//     * @return Horaire[] Returns an array of Horaire objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('h')
//            ->andWhere('h.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('h.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Horaire
//    {
//        return $this->createQueryBuilder('h')
//            ->andWhere('h.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/MarqueRepository.php
Nume: MarqueRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Marque;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Marque>
 *
 * @method Marque|null find($id, $lockMode = null, $lockVersion = null)
 * @method Marque|null findOneBy(array $criteria, array $orderBy = null)
 * @method Marque[]    findAll()
 * @method Marque[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class MarqueRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Marque::class);
    }

//    /**
//     * @return Marque[] Returns an array of Marque objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('m.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Marque
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/ModeleRepository.php
Nume: ModeleRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Modele;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Modele>
 *
 * @method Modele|null find($id, $lockMode = null, $lockVersion = null)
 * @method Modele|null findOneBy(array $criteria, array $orderBy = null)
 * @method Modele[]    findAll()
 * @method Modele[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ModeleRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Modele::class);
    }

//    /**
//     * @return Modele[] Returns an array of Modele objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('m.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Modele
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/ServiceRepository.php
Nume: ServiceRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Service;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Service>
 *
 * @method Service|null find($id, $lockMode = null, $lockVersion = null)
 * @method Service|null findOneBy(array $criteria, array $orderBy = null)
 * @method Service[]    findAll()
 * @method Service[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ServiceRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Service::class);
    }

//    /**
//     * @return Service[] Returns an array of Service objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('s')
//            ->andWhere('s.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('s.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Service
//    {
//        return $this->createQueryBuilder('s')
//            ->andWhere('s.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/TemoignageRepository.php
Nume: TemoignageRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Temoignage;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Temoignage>
 *
 * @method Temoignage|null find($id, $lockMode = null, $lockVersion = null)
 * @method Temoignage|null findOneBy(array $criteria, array $orderBy = null)
 * @method Temoignage[]    findAll()
 * @method Temoignage[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class TemoignageRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Temoignage::class);
    }

//    /**
//     * @return Temoignage[] Returns an array of Temoignage objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('t.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Temoignage
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/TypeRepository.php
Nume: TypeRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Type;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Type>
 *
 * @method Type|null find($id, $lockMode = null, $lockVersion = null)
 * @method Type|null findOneBy(array $criteria, array $orderBy = null)
 * @method Type[]    findAll()
 * @method Type[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class TypeRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Type::class);
    }

//    /**
//     * @return Type[] Returns an array of Type objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('t.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Type
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/VehiculeImageRepository.php
Nume: VehiculeImageRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\VehiculeImage;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<VehiculeImage>
 *
 * @method VehiculeImage|null find($id, $lockMode = null, $lockVersion = null)
 * @method VehiculeImage|null findOneBy(array $criteria, array $orderBy = null)
 * @method VehiculeImage[]    findAll()
 * @method VehiculeImage[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class VehiculeImageRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, VehiculeImage::class);
    }

//    /**
//     * @return VehiculeImage[] Returns an array of VehiculeImage objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('v.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?VehiculeImage
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Repository/VehiculeRepository.php
Nume: VehiculeRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Vehicule;
use App\Entity\Categorie;
use App\Data\SearchData;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Knp\Component\Pager\PaginatorInterface;
use Knp\Component\Pager\Pagination\PaginationInterface;

/**
 * @extends ServiceEntityRepository<Vehicule>
 *
 * @method Vehicule|null find($id, $lockMode = null, $lockVersion = null)
 * @method Vehicule|null findOneBy(array $criteria, array $orderBy = null)
 * @method Vehicule[]    findAll()
 * @method Vehicule[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class VehiculeRepository extends ServiceEntityRepository
{
    /**
     * @var PaginatorInterface
     */

     private $paginator;

     public function __construct(ManagerRegistry $registry, PaginatorInterface $paginator)
     {
         parent::__construct($registry, Vehicule::class);
         $this->paginator = $paginator;
     }
 
     public function save(Vehicule $entity, bool $flush = false): void
     {
         $this->getEntityManager()->persist($entity);
 
         if ($flush) {
             $this->getEntityManager()->flush();
         }
     }
 
     public function remove(Vehicule $entity, bool $flush = false): void
     {
         $this->getEntityManager()->remove($entity);
 
         if ($flush) {
             $this->getEntityManager()->flush();
         }
     }
 
     /**
      * Récupère le prix minimum et maximum correspondant à une recherche
      * @return integer[]
      */
     public function findPrixMinMax(SearchData $search): array
     {
         $results = $this->getSearchQuery($search, true)
             ->select('MIN(p.prix) as prixmin', 'MAX(p.prix) as prixmax')
             ->getQuery()
             ->getScalarResult();
         return [(int)$results[0]['prixmin'], (int)$results[0]['prixmax']];
     }
 
     /**
      * Récupère le kilometrage minimum et maximum correspondant à une recherche
      * @return integer[]
      */
     public function findKmMinMax(SearchData $search): array
     {
         $results = $this->getSearchQuery($search, true)
             ->select('MIN(p.kilometrage) as kmmin', 'MAX(p.kilometrage) as kmmax')
             ->getQuery()
             ->getScalarResult();
         return [(int)$results[0]['kmmin'], (int)$results[0]['kmmax']];
     }
 
     /**
      * Récupère le annee minimum et maximum correspondant à une recherche
      * @return integer[]
      */
     public function findAnneeMinMax(SearchData $search): array
     {
         $results = $this->getSearchQuery($search, true)
             ->select('MIN(p.annee) as anneemin', 'MAX(p.annee) as anneemax')
             ->getQuery()
             ->getScalarResult();
         return [(int)$results[0]['anneemin'], (int)$results[0]['anneemax']];
     }
     
     // Constructs the base query for vehicle searches.
     private function getSearchQuery(SearchData $search, $ignorePrix = false, $ignoreKm = false, $ignoreAnnee = false): QueryBuilder
     {
         $query = $this
            ->createQueryBuilder('p')
            ->select('c', 'p', 't', 'a', 'm', 'd')
            ->join('p.marque', 'm')
            ->join('p.modele', 'd')
            ->join('p.categorie', 'c')
            ->join('p.type', 't')
            ->join('p.carburant', 'a')
            ->orderBy('p.id', 'DESC');

        if(!empty($search->marque)) {
            $query = $query
                ->andWhere('m.id IN (:marque)')
                ->setParameter('marque', $search->marque);
        }

        if(!empty($search->modele)) {
          $query = $query
              ->andWhere('d.id IN (:modele)')
              ->setParameter('modele', $search->modele);
        }

        if(!empty($search->categorie)) {
            $query = $query
                ->andWhere('c.id IN (:categorie)')
                ->setParameter('categorie', $search->categorie);
        }

        if(!empty($search->type)) {
            $query = $query
                ->andWhere('t.id IN (:type)')
                ->setParameter('type', $search->type);
        }

        if(!empty($search->carburant)) {
            $query = $query
                ->andWhere('a.id IN (:carburant)')
                ->setParameter('carburant', $search->carburant);
        }
 
         if (!empty($search->prixmin) && $ignorePrix === false) {
             $query = $query
                 ->andWhere('p.prix >= :prixmin')
                 ->setParameter('prixmin', $search->prixmin);
         }
 
         if (!empty($search->prixmax) && $ignorePrix === false) {
             $query = $query
                 ->andWhere('p.prix <= :prixmax')
                 ->setParameter('prixmax', $search->prixmax);
         }
 
         if (!empty($search->kmmin && $ignoreKm === false)) {
             $query = $query
                 ->andWhere('p.kilometrage >= :kmmin')
                 ->setParameter('kmmin', $search->kmmin);
         }
 
         if (!empty($search->kmmax) && $ignoreKm === false) {
             $query = $query
                 ->andWhere('p.kilometrage <= :kmmax')
                 ->setParameter('kmmax', $search->kmmax);
         }
 
         if (!empty($search->anneemin) && $ignoreAnnee === false) {
             $query = $query
                 ->andWhere('p.annee >= :anneemin')
                 ->setParameter('anneemin', $search->anneemin);
         }
 
         if (!empty($search->anneemax) && $ignoreAnnee === false) {
             $query = $query
                 ->andWhere('p.annee <= :anneemax')
                 ->setParameter('anneemax', $search->anneemax);
         }
 
         return $query;
     }
 
     /**
      * Récupère les vehicules en lien avec une recherce
      * @return PaginationInterface
      */
 
     public function findSearch(SearchData $search): PaginationInterface
     {   
         
 
         $query = $this->getSearchQuery($search)->getQuery();
         return $this->paginator->paginate(
             $query,
             $search->page,
             12
         );
 
     }
    /*
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Vehicule::class);
    }
    */
//    /**
//     * @return Vehicule[] Returns an array of Vehicule objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('v.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Vehicule
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

-------------------------------------
Cale: src//Security/AppCustomAuthenticator.php
Nume: AppCustomAuthenticator.php
Continut:
<?php

namespace App\Security;

use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Http\Authenticator\AbstractLoginFormAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\RememberMeBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Credentials\PasswordCredentials;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\SecurityRequestAttributes;
use Symfony\Component\Security\Http\Util\TargetPathTrait;

class AppCustomAuthenticator extends AbstractLoginFormAuthenticator
{
    use TargetPathTrait;

    public const LOGIN_ROUTE = 'app_login';

    public function __construct(private UrlGeneratorInterface $urlGenerator)
    {
    }

    public function authenticate(Request $request): Passport
    {
        $email = $request->request->get('email', '');

        $request->getSession()->set(SecurityRequestAttributes::LAST_USERNAME, $email);

        return new Passport(
            new UserBadge($email),
            new PasswordCredentials($request->request->get('password', '')),
            [
                new CsrfTokenBadge('authenticate', $request->request->get('_csrf_token')),
                new RememberMeBadge(),
            ]
        );
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
        if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {
            return new RedirectResponse($targetPath);
        }

        $user = $token->getUser();
        //dd($user->getRoles());
        if (in_array('ROLE_ADMIN', $user->getRoles(), true)) {
            return new RedirectResponse($this->urlGenerator->generate('admin'));
        }
            return new RedirectResponse($this->urlGenerator->generate('employes'));
    }

    protected function getLoginUrl(Request $request): string
    {
        return $this->urlGenerator->generate(self::LOGIN_ROUTE);
    }
}

-------------------------------------
Cale: src//Service/NavCarburant.php
Nume: NavCarburant.php
Continut:
<?php

namespace App\Service;

use App\Repository\CarburantRepository;

class NavCarburant
{
    private $carburantRepository;

    public function __construct(CarburantRepository $carburantRepository)
    {
        $this->carburantRepository = $carburantRepository;
    }

    public function carburant():array
    {
        return $this->carburantRepository->findAll();
    }
}
-------------------------------------
Cale: src//Service/NavCategorie.php
Nume: NavCategorie.php
Continut:
<?php

namespace App\Service;

use App\Repository\CategorieRepository;

class NavCategorie
{
    private $categorieRepository;

    public function __construct(CategorieRepository $categorieRepository)
    {
        $this->categorieRepository = $categorieRepository;
    }

    public function categorie():array
    {
        return $this->categorieRepository->findAll();
    }
}
-------------------------------------
Cale: src//Service/NavMarque.php
Nume: NavMarque.php
Continut:
<?php

namespace App\Service;

use App\Repository\MarqueRepository;

class NavMarque
{
    private $marqueRepository;

    public function __construct(MarqueRepository $marqueRepository)
    {
        $this->marqueRepository = $marqueRepository;
    }

    public function marque():array
    {
        return $this->marqueRepository->findAll();
    }
}
-------------------------------------
Cale: src//Service/NavModele.php
Nume: NavModele.php
Continut:
<?php

namespace App\Service;

use App\Repository\ModeleRepository;

class NavModele
{
    private $modeleRepository;

    public function __construct(ModeleRepository $modeleRepository)
    {
        $this->modeleRepository = $modeleRepository;
    }

    public function modele():array
    {
        return $this->modeleRepository->findAll();
    }
}
-------------------------------------
Cale: src//Service/NavType.php
Nume: NavType.php
Continut:
<?php

namespace App\Service;

use App\Repository\TypeRepository;

class NavType
{
    private $typeRepository;

    public function __construct(TypeRepository $typeRepository)
    {
        $this->typeRepository = $typeRepository;
    }

    public function type():array
    {
        return $this->typeRepository->findAll();
    }
}
-------------------------------------
Cale: src//Twig/HoraireExtension.php
Nume: HoraireExtension.php
Continut:
<?php
namespace App\Twig;

use Twig\TwigFunction;
use App\Entity\Horaire;
use Twig\Extension\AbstractExtension;
use Doctrine\ORM\EntityManagerInterface;

class HoraireExtension extends AbstractExtension
{
    private $em;

    public function __construct(EntityManagerInterface $em)
    {
        $this->em = $em;
    }

    public function getFunctions(): array
    {
        return [
            new TwigFunction('horaire', [$this, 'getHoraire'])
        ];
    }

    public function getHoraire()
    {
        return $this->em->getRepository(Horaire::class)->findAll();
    }
}
-------------------------------------
Cale: templates//_partials/_footer.html.twig
Nume: _footer.html.twig
Continut:
<footer class="container-fluid bg-dark text-white text-center py-2">
	<div class="row">
		<div class="col-md-4 mb-3 text-center text-md-center">
    <div class="d-inline-flex align-items-center text-white">
			<table class="" id="openingHoursTable">
				<thead>
					<tr>
						<th scoop="col" colspan="2" class="mb-5 text-warning">Horaire d'ouverture</th>
					</tr>
				</thead>
				<tbody>
					{% for _horaire in horaire.getHoraire %}
						<tr>
							<th scoope="row">{{_horaire.jour}}:</th>
							<td id="{{_horaire.jour}}">
								{{_horaire.ouverturematin}}-{{_horaire.fermeturemidi}},
								{{_horaire.ouvertureapresmidi}}-{{_horaire.fermeturesoir}}
							</td>
						</tr>
					{% endfor %}
				</tbody>
			</table>
      </div>
		</div>
		<div class="col-md-4 mt-3 mb-3">
			<p>© Copyright 2024<br></p>
      <p>Retrouvez-nous sur:</p>
			<a href="https://www.x.com" target="_blank" title="X" class="text-white px-2"><i class="fa-brands fa-x"></i></a>
			<a href="https://www.instagram.com" target="_blank" title="Instagram" class="text-white px-2"><i class="fa-brands fa-instagram"></i></a>
      <a href="https://www.facebook.com" target="_blank" title="Facebook" class="text-white px-2"><i class="fa-brands fa-facebook"></i></a>
      <a href="https://www.linkedin.com" target="_blank" title="Linkedin" class="text-white px-2"><i class="fa-brands fa-linkedin"></i></a>
      <a href="https://www.youtube.com" target="_blank" title="YouTube" class="text-white px-2"><i class="fa-brands fa-youtube"></i></a>
      <p><br>Repo GitHub Application WEB Garage Vincent PARROT</p>
      <a href="https://github.com/Techni-Dan/VParrotWebApp" target="_blank" title="Repo GitHub Application WEB Garage Vincent PARROT" class="text-white px-2"><i class="fa-brands fa-github"></i></a>
		</div>
		<div class="col-md-4 mt-3 mb-5">
			<a class="nav-link" href="{{path('page_cgu')}}" title="Conditions Générales d'Utilisation">CGU</a>
			<a class="nav-link" href="{{path('mentions_legales')}}" title="Mentions légales">Mentions légales</a>
			<p><br><br>
				<i class="fa-solid fa-location-dot fa-bounce"></i>
				Adresse :<a class="nav-link" href="https://goo.gl/maps/s761phYgSsD2Vii78" target="_blank" title="Toulouse, France">Toulouse, France</a>
			</p>
		</div>
	</div>
</footer>

-------------------------------------
Cale: templates//_partials/_formContact.html.twig
Nume: _formContact.html.twig
Continut:
<div class="bg-white p-3 contact-form">
	<div class="form-group">
		{{ form_start(contact_form) }}
		{{ form_row(contact_form.nom, {'attr': {'class': 'form-control', 'placeholder' :'Votre nom'}}) }}
		{{ form_row(contact_form.prenom, {'attr': {'class': 'form-control', 'placeholder' :'Votre prénom'}}) }}

		<div class="form-group">
			{{ form_row(contact_form.email, {'attr': {'class': 'form-control', 'placeholder' :'Votre e-mail'}}) }}
		</div>
		<div class="form-group">
			{{ form_row(contact_form.tel, {'attr': {'class': 'form-control', 'placeholder' :'Votre numéro de téléphone'}}) }}
		</div>
		<div class="form-group">
			{{ form_row(contact_form.message, {'attr': {'class': 'form-control', 'placeholder' :'Votre message'}}) }}
		</div>
		<div class="form-group">
			<input type="submit" value="Envoyer" class="btn btn-primary py-2 px-2">
		</div>
		{{ form_end(contact_form) }}
		{% for message in app.flashes('success') %}
			<div class="flash-success">
				{{ message }}
			</div>
		{% endfor %}
	</div>
</div>
-------------------------------------
Cale: templates//_partials/_header.html.twig
Nume: _header.html.twig
Continut:
<div class="bg-dark text-center py-2 text-warning">
  Site Web démonstratif -> Application web réalisé pour une évaluation en cours de formation.
</div>
<nav class="navbar navbar-expand-lg bg-dark text-white" data-bs-theme="dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="{{path('app_home')}}" title="Accueil">
			<img src="/images/logo.png" alt="V. PARROT" width="120" >
    	</a>
        <i class="fa-sharp fa-solid fa-phone fa-shake"></i>
        <a class="navbar-brand ms-2" href="tel://+33123456789" title="Appelez-nous">01 23 45 67 89</a>
		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor02" aria-controls="navbarColor02" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarColor02">
			<ul class="navbar-nav ms-auto">
				<li class="nav-item">
					<a class="nav-link" href="{{path('app_home')}}">ACCUEIL</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="{{path('app_occasions_page')}}">NOS OCCASIONS</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="{{path('app_apropos')}}">A PROPOS</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="{{path('app_contact')}}">CONTACT</a>
				</li>
				<li class="nav-item">
					<a class="btn btn-primary ms-2 mt-2" href="{{path('app_login')}}">Connexion</a>
				</li>
			</ul>
		</div>
	</div>
</nav>
-------------------------------------
Cale: templates//admin/dashboard.html.twig
Nume: dashboard.html.twig
Continut:
{% extends '@EasyAdmin/page/content.html.twig' %}

{% block content_title %}Tableau de bord{% endblock %}
{% block main %}
    <h2>Ajouter des employés dans la base de données</h2>
    <h2>Editer la page d'accueil - section services</h2>
    <h2>Définir des horaires d'ouverture ou indiquer une fermeture</h2>
    <h2>Afficher - modifier - supprimer messages de contact</h2>
{% endblock %}
-------------------------------------
Cale: templates//base.html.twig
Nume: base.html.twig
Continut:
<!DOCTYPE html>
<html lang="fr">
	<head>
		<meta charset="UTF-8">
		<title>
			{% block title %}Welcome!
			{% endblock %}
		</title>
		<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		{% block stylesheets %}
			{{ encore_entry_link_tags('app') }}
			<link rel="stylesheet" href="{{ asset('/assets/css/style.css') }}">
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
			<link rel="preconnect" href="https://fonts.googleapis.com">
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
			<link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
			{#<link href="https://bootswatch.com/5/flatly/bootstrap.min.css" rel="stylesheet">#}
			{% endblock %}

		{% block javascripts %}
			{{ encore_entry_script_tags('app') }}
			<script type='text/javascript' src='https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js' defer></script>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous" defer></script>
			{#<script src="{{ asset('assets/js/app.js') }}" defer></script>#}
			{#<script src="{{ asset('assets/js/script_occasions.js') }}" defer></script>#}
		{% endblock %}
	</head>
	<body class="d-flex flex-column justify-content-between min-vh-100 snippet-body" > {#oncontextmenu='return false'#}
		{% include "_partials/_header.html.twig" %}
		<div class="flex-grow-1"> {% block body %}{% endblock %}
		</div>
		{% include "_partials/_footer.html.twig" %}
	</body>
	</html>


-------------------------------------
Cale: templates//bundles/TwigBundle/Exception/error403.html.twig
Nume: error403.html.twig
Continut:
{% extends "base.html.twig" %}
{% block title %}Accès interdit{% endblock %}
{% block body %}
    <div class="container w-75">
        <section class="row">
            <div class="col-12">
                <h1>Accès interdit</h1>
                <p>Vous n'avez pas la permission de voir cette page</p>
                <p>Code de l'erreur : {{ status_code }}</p>
                <p>Message de l'erreur : {{ status_text }}</p>
                <p><a href="{{ path('app_login')}}">Connexion</a></p>
            </div>
        </section>
    </div>
{% endblock %}
-------------------------------------
Cale: templates//bundles/TwigBundle/Exception/error404.html.twig
Nume: error404.html.twig
Continut:
{% extends "base.html.twig" %}
{% block title %}Page non trouvée{% endblock %}
{% block body %}
    <div class="container w-75">
        <section class="row">
            <div class="col-12">
                <h1>Page non trouvée</h1>
                <p>La page que vous recherchez n'a pas été trouvée.</p>
                <p>Code de l'erreur : {{ status_code }}</p>
                <p>Message de l'erreur : {{ status_text }}</p>
                <p>Message personnalisé : {{ exception.message }}</p>
                <p><a href="{{ path('app_home')}}">ACCUEIL</a></p>
            </div>
        </section>
    </div>
{% endblock %}
-------------------------------------
Cale: templates//contact/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}
{% block title %}Nous contacter
{% endblock %}
{% block body %}
	<div class="container w-75">
		<h1 class="mt-5 mb-5">Contactez notre équipe</h1>
		<p>Pour toute demande d'information, vous pouvez nous contacter par téléphone au:<a class="ms-2" href="tel://+33123456789">01 23 45 67 89</a><br>ou en remplissant le formulaire ci-dessous.</p>
		<form method="post" action="{{ path('app_contact') }}">
			{% include '_partials/_formContact.html.twig'  with {contact_form: contact_form} only  %}
		</form>
	</div>
{% endblock %}

-------------------------------------
Cale: templates//employes/dashboard.html.twig
Nume: dashboard.html.twig
Continut:
{% extends '@EasyAdmin/page/content.html.twig' %}

{% block content_title %}Tableau de bord{% endblock %}
{% block main %}
    <h2>Ajouter, visualiser, modifier, supprimer un vehicule sur le site web</h2>
    <h2>Ajouter, modérée, approuver un témoignage</h2>
{% endblock %}
-------------------------------------
Cale: templates//home/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}
{% block title %}Garage Vincen Parrot
{% endblock %}
{% block body %}
	<div class="container mt-3 mb-3">
		<h1 class="mt-5 mb-5">Garage Vincent PARROT - réparation automobile à Toulouse
		</h1>
	</div>
	<div class="raw">
		<div class="container mb-3">
			<div class="card-group">
				{% for _service in services %}
					<div class="card">
						<img class="img-fluid rounded" src="{{ vich_uploader_asset(_service, 'imageFile') }}" alt="Réparation">
						<div class="card-body">
							<h2 class="card-title">{{ _service.titre }}</h2>
							<p class="card-text mt-3">{{ _service.description1|raw|nl2br|sanitize_html }}</p>
							<p class="card-text">{{ _service.description2|raw|nl2br|sanitize_html }}</p>
							<ul class="list-group list-group-flush">
								<li class="list-group-item list-group-item-primary">Liste services:</li>
								<li class="list-group-item list-group-item-info">{{ _service.listeitem1 }}</li>
								<li class="list-group-item list-group-item-info">{{ _service.listeitem2 }}</li>
								<li class="list-group-item list-group-item-info">{{ _service.listeitem3 }}</li>
								<li class="list-group-item list-group-item-info">{{ _service.listeitem4 }}</li>
								<li class="list-group-item list-group-item-info">{{ _service.listeitem5 }}</li>
							</ul>
							<p class="card-text mt-3">{{ _service.description3|raw|nl2br|sanitize_html }}</p>
						</div>
						<div class="card-footer">
							<small class="text-muted"></small>
						</div>
					</div>
				{% endfor %}
			</div>
		</div>
	</div>
	<div class="raw">
		<div class="container mb-3">
			<div class="card-group">
				<div class="card">
					<a href="{{path('app_occasions_page')}}" class="card-link">
						<img src="/images/services/audi.png" class="card-img-top" alt="Vehicule">
					</a>
					<div class="card-body">
						<a href="{{path('app_occasions_page')}}" class="card-link">
							<h2 class="card-title">Vente des véhicules d'occasion</h2>
						</a>
						<p class="card-text">Découvrez notre sélection soigneusement choisie de voitures d'occasion de qualité. Que vous recherchiez une berline élégante, un SUV spacieux ou une compacte économique, nous avons le véhicule qui correspond à vos besoins.</p>
						<p class="card-text">Chez nous, vous bénéficierez d'une expérience d'achat transparente et sans tracas. Chaque véhicule a été minutieusement inspecté par nos experts pour garantir sa fiabilité et sa performance. De plus, nous fournissons un historique complet du véhicule, afin que vous puissiez prendre une décision éclairée en toute confiance.</p>
						<p class="card-text">Notre équipe de professionnels expérimentés est là pour vous guider à chaque étape du processus d'achat. Nous répondrons à toutes vos questions, vous fournirons des informations détaillées sur nos véhicules et vous accompagnerons dans vos démarches administratives.</p>
					</div>
					<div class="card-footer">
						<small class="text-muted"></small>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="raw">
		<div class="container mb-3">
			<h2>Témoignages</h2>
			<ul class="testimonials">
				{% for _temoignage in temoignages %}
					<li class="testimony">
						<div>
							{% if _temoignage.note == 1 %}
								<p class="testimony-content">⭐</p>
							{% elseif _temoignage.note == 2 %}
								<p class="testimony-content">⭐⭐</p>
							{% elseif _temoignage.note == 3 %}
								<p class="testimony-content">⭐⭐⭐</p>
							{% elseif _temoignage.note == 4 %}
								<p class="testimony-content">⭐⭐⭐⭐</p>
							{% elseif _temoignage.note == 5 %}
								<p class="testimony-content">⭐⭐⭐⭐⭐</p>
							{% endif %}
							<h3 class="testimony-title">{{ _temoignage.nom }}</h3>
							<div class="testimony-content">
								<p>{{ _temoignage.commentaire }}</p>
							</div>
							<h3 class="testimony-date">Date: {{ _temoignage.updatedAt|date('d-m-Y H:i:s') }}</h3>
						</div>
					</li>
				{% endfor %}
			</ul>
		</div>
	</div>
	<div class="">
		<div class="temoignageForm mb-3">
			<h3>Envoyez nous un commentaire !</h3>
			<div class="bg-white p-2">
				<div class="form-group">
					{{ form_start(temoignage_form) }}
					{{ form_row(temoignage_form.nom, {'attr': {'class': 'form-control', 'placeholder' :'Votre nom'}}) }}
					<div class="form-group">
						{{ form_row(temoignage_form.note, {'attr': {'class': 'form-control', 'placeholder' :'Numéro de 1 à 5'}}) }}
					</div>
					<div class="form-group">
						{{ form_row(temoignage_form.commentaire, {'attr': {'class': 'form-control', 'placeholder' :' Maximum de 500 caractères'}}) }}
					</div>
					<div class="form-group">
						<input type="submit" value="Envoyer" class="btn btn-primary py-2 px-2">
					</div>
					{{ form_end(temoignage_form) }}
					{% for message in app.flashes('success') %}
						<div class="flash-success">
							{{ message }}
						</div>
					{% endfor %}
				</div>
			</div>
		</div>
	</div>
{% endblock %}


-------------------------------------
Cale: templates//occasions/_card.html.twig
Nume: _card.html.twig
Continut:
<div class="card mb-3" id="occasion-{{ _occasion.id }}">
	<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">
		<h4 class="card-header">{{_occasion.titre}}</h4>
	</a>
	<div class="card-body">
		<h5 class="card-title text-primary">Prix:
			{{_occasion.prix | number_format(0, ',', ' ')}}
			€</h5>
		<h6 class="card-subtitle text-muted">Année:
			{{_occasion.annee}}</h6>
		<h6 class="card-subtitle text-muted">Kilométrage:
			{{_occasion.Kilometrage | number_format(0, ',', ' ')}}
			- km
		</h6>
	</div>
	<div id="carouselExampleIndicators" class="carousel slide">
		<div class="carousel-inner">
			{% for image in _occasion.images %}
				<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="">
					<div class="carousel-item {% if loop.first %}active{% endif %}">
						<img src="{{ vich_uploader_asset(image, 'imageFile') }}" id="{{ _occasion.modele }}" class="d-block w-100" alt="{{ _occasion.modele }}">
					</div>
				</a>
			{% endfor %}
		</div>
	</div>
	<ul class="list-group list-group-flush">
		<li class="list-group-item">Categorie de véhicule : {{_occasion.categorie}}</li>
		<li class="list-group-item">Marque : {{_occasion.marque}}</li>
		<li class="list-group-item">Modele : {{_occasion.modele}}</li>
		<li class="list-group-item">Type de véhicule : {{_occasion.type}}</li>
		<li class="list-group-item">Carburant : {{_occasion.carburant}}</li>
	</ul>
	<div class="card-body">
		<h5>Descrition</h5>
		<p class="card-text">{{_occasion.description|slice(0,60)}}...</p>
	</div>
	<div class="card-body">
		<h5>Options</h5>
		<p class="card-text">{{_occasion.options|slice(0,60)}}...</p>
	</div>
  <div class="card-body">
		<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">Plus d'info</a>
	</div>
  <div class="card-footer text-muted">
    Ajoutée par:
    {% for employe in _occasion.employe %}
        <p class="card-text">{{ employe.prenom }}</p>
    {% endfor %}
  </div>
	<div class="card-footer text-muted">Date d'ajout: {{_occasion.DateAjout|date('d-m-Y H:i:s') }}</div>
</div>

-------------------------------------
Cale: templates//occasions/_filter.html.twig
Nume: _filter.html.twig
Continut:
{{ form_start(form, {attr: {class: 'filter js-filter-form'}}) }}

  <div class="spinner-border js-loading" role="status" aria-hidden="true" style="display: none">
    <span class="sr-only">Chargement...</span>
  </div>
  <h2 class="mt-5 mb-3">Filtrer les véhicules:</h2>
  <h4>Prix</h4>
  <div class="row">
    <div class="col-md-6">
      {{ form_row(form.prixmin, {'attr': {'readonly': 'readonly'}}) }}
    </div>
    <div class="col-md-6">
      {{ form_row(form.prixmax, {'attr': {'readonly': 'readonly'}}) }}
    </div>
  </div>
  <div class="mx-2" id="prix-slider" data-min="{{ prixmin }}" data-max="{{ prixmax }}" style="margin-bottom: 3rem;"></div>

  <h4>Kilométrage</h4>
  <div class="row">
    <div class="col-md-6">
      {{ form_row(form.kmmin, {'attr': {'readonly': 'readonly'}}) }}
    </div>
    <div class="col-md-6">
      {{ form_row(form.kmmax, {'attr': {'readonly': 'readonly'}}) }}
    </div>
  </div>
  <div class="mx-2" id="km-slider" data-min="{{ kmmin }}" data-max="{{ kmmax }}" style="margin-bottom: 3rem;"></div>

    <h4>Année</h4>
  <div class="row">
    <div class="col-md-6">
      {{ form_row(form.anneemin, {'attr': {'readonly': 'readonly'}}) }}
    </div>
    <div class="col-md-6">
      {{ form_row(form.anneemax, {'attr': {'readonly': 'readonly'}}) }}
    </div>
  </div>
  <div class="mx-2" id="annee-slider" data-min="{{ anneemin }}" data-max="{{ anneemax }}" style="margin-bottom: 3rem;"></div>

  <h4>Marques:</h4>
  <div class="row">
    <div class="col-md-12">
     {{ form_row(form.marque, { 'attr': {} }) }}    
    </div>
  </div>

  <h4>Modèles:</h4>
  <div class="row">
  <div class="col-md-12">
    {{ form_row(form.modele, { 'attr': {'class': 'js-model-select' } }) }}    
  </div>
  </div>

 <h4>Catégories:</h4>
  <div class="row">
    <div class="col-md-6">
      {{ form_row(form.categorie) }}
    </div>
  </div>
  
  <h4>Type carrosserie:</h4>
  <div class="row">
    <div class="col-md-6">
      {{ form_row(form.type) }}
    </div>
  </div>
  
  <h4>Carburant vehicules:</h4>
  <div class="row">
    <div class="col-md-6">
      {{ form_row(form.carburant) }}
    </div>
  </div>

{#<button type="submit" class="btn btn-primary w-100">Filtrer</button>#}
<a class="btn btn-primary mt-2 mb-3 w-100" href="{{path('app_occasions_page')}}">Réinitialiser les filtres</a>

{{ form_end(form) }}

-------------------------------------
Cale: templates//occasions/_occasions.html.twig
Nume: _occasions.html.twig
Continut:
{% for _occasion in occasions %}
	{% include 'occasions/_card.html.twig' with {_occasion: _occasion} only %}
{% endfor %}

-------------------------------------
Cale: templates//occasions/_pagination.html.twig
Nume: _pagination.html.twig
Continut:
{{ knp_pagination_render(occasions) }}
-------------------------------------
Cale: templates//occasions/_rechercherfiltrer.html.twig
Nume: _rechercherfiltrer.html.twig
Continut:
<div class="bs-docs-section">
	<div class="container">
		<div class="row">
			<h4 class="Mt-3 mb-3">Rechercher des véhicules par:</h4>
    		<div class="col-md-12">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm" id="marqueSelect">
						<option selected>Marque...</option>
						{% for marque in marqueList %}
							<option value="{{ path('app_occcasions_marque_show',{'id':marque.id}) }}">{{marque.nom}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
		</div>
		<div class="row">
    		<div class="col-md-12">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm " id="modeleSelect">
						<option selected>Modele...</option>
						{% for modele in modeleList %}
							<option value="{{ path('app_occcasions_modele_show',{'id':modele.id}) }}">{{modele.nom}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
		</div>
		<div class="row">
    		<div class="col-md-12">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm mr-sm-2" aria-label="Default select example" id="categorieSelect">
						<option selected>Catégorie vehicule...</option>
						{% for categorie in categorieList %}
							<option value="{{ path('app_occcasions_categorie_show',{'id':categorie.id}) }}">{{categorie.libelle}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
		</div>
		<div class="row">
    		<div class="col-md-12">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm mr-sm-2" id="typeSelect">
						<option selected>Type carrosserie...</option>
						{% for type in typeList %}
							<option value="{{ path('app_occcasions_type_show',{'id':type.id}) }}">{{type.libelle}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
		</div>
		<div class="row">
    		<div class="col-md-12">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm mr-sm-2" id="carburantSelect">
						<option selected>Carburant...</option>
						{% for carburant in carburantList %}
							<option value="{{ path('app_occcasions_carburant_show',{'id':carburant.id}) }}">{{carburant.libelle}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
		</div>
		{#}
		<div class="row">
			<div class="col-lg-3">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm" id="marqueSelect">
						<option selected>Marque...</option>
						{% for marque in marqueList %}
							<option value="{{ path('app_occcasions_marque_show',{'id':marque.id}) }}">{{marque.nom}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
			<div class="col-lg-3">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm " id="modeleSelect">
						<option selected>Modele...</option>
						{% for modele in modeleList %}
							<option value="{{ path('app_occcasions_modele_show',{'id':modele.id}) }}">{{modele.nom}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
			<div class="col-lg-3">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm mr-sm-2" aria-label="Default select example" id="categorieSelect">
						<option selected>Catégorie vehicule...</option>
						{% for categorie in categorieList %}
							<option value="{{ path('app_occcasions_categorie_show',{'id':categorie.id}) }}">{{categorie.libelle}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
			<div class="col-lg-3">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm mr-sm-2" id="typeSelect">
						<option selected>Type carrosserie...</option>
						{% for type in typeList %}
							<option value="{{ path('app_occcasions_type_show',{'id':type.id}) }}">{{type.libelle}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
			<div class="col-lg-3">
				<div class="col-auto my-1">
					<select class="form-select form-select-sm mr-sm-2" id="carburantSelect">
						<option selected>Carburant...</option>
						{% for carburant in carburantList %}
							<option value="{{ path('app_occcasions_carburant_show',{'id':carburant.id}) }}">{{carburant.libelle}}</option>
						{% endfor %}
					</select>
				</div>
			</div>
			<br><br>
			<h4 class="">Filtrer la recherche des véhicules par:</h4>

			<br><br>
		</div>#}
	</div>
</div>

-------------------------------------
Cale: templates//occasions/_sorting.html.twig
Nume: _sorting.html.twig
Continut:
{{ knp_pagination_sortable(occasions, 'Prix', 'p.prix') }}
{{ knp_pagination_sortable(occasions, 'Kilométrage', 'p.kilometrage') }}
{{ knp_pagination_sortable(occasions, 'Année', 'p.annee') }}

-------------------------------------
Cale: templates//occasions/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Vehicules Occasion - Garage Automobile Vincent Parrot{% endblock %}
{#{% block javascripts %}
	<script src="{{ asset('assets/js/script_occasions.js') }}" defer></script>
{% endblock %}#}
{% block body %}
	<div class="container">
		<h1 class="mt-5 mb-5">Notre sélection de véhicules d'occasion</h1>
	</div>
	<div class="container js-filter">
		<div class="row">
			<div class="col-md-3">
				{#{% include "occasions/_rechercherfiltrer.html.twig" %}#}
				{% include 'occasions/_filter.html.twig' with {form: form, prixmin:prixmin, prixmax:prixmax, kmmin:kmmin, kmmax:kmmax, anneemin:anneemin, anneemax:anneemax} only %}
			</div>
			<div class="col-12 col-md-9 col-sm">
			    <div class="d-flex justify-content-end mb-2 js-filter-sorting">
				    {% include 'occasions/_sorting.html.twig' %}
			    </div>
				<div class="grid js-filter-content">
					 
					{% include 'occasions/_occasions.html.twig' %}
					
				</div>
				<div class="mt-2 mb-2 js-filter-pagination">
					{% include 'occasions/_pagination.html.twig' %}
				</div>
			</div>
		</div>
	</div>
{% endblock %}

-------------------------------------
Cale: templates//occasions/vehicule.html.twig
Nume: vehicule.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Vincent Parrot -
	{{exemplaire.titre}}
{% endblock %}

{% block body %}
	<div class="container mt-3">
		<h1 class="mt-5 mb-5">{{exemplaire.marque}} - {{exemplaire.modele}}</h1>
		<div class="col-lg-12">
			<div class="card mb-3">
				<h3 class="card-header">{{exemplaire.titre}}</h3>
				<div class="card-body">
					<h5 class="card-title">Prix: {{exemplaire.prix | number_format(0, ',', ' ')}}
						€</h5>
					<h6 class="card-subtitle text-muted"><strong>Année:</strong>
						{{exemplaire.annee}}</h6>
					<h6 class="card-subtitle text-muted"><strong>Kilométrage:</strong>
						{{exemplaire.Kilometrage | number_format(0, ',', ' ')}}
						- km
					</h6>
				</div>
        {# Image Carousel #}
				<div class="carousel-inner"></div>
				<div id="carouselExampleFade" class="carousel slide carousel-fade">
					<div class="carousel-inner">
							{% for image in exemplaire.images %}
								<div class="carousel-item {% if loop.first %}active{% endif %}">
									<img src="{{ vich_uploader_asset(image, 'imageFile') }}" id="imageVoiture{{ exemplaire.id }}" class="d-block w-100" alt="imageVoiture{{ exemplaire.id }}">
								</div>
							{% endfor %}
					</div>
					<button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="prev">
						<span class="carousel-control-prev-icon" aria-hidden="true"></span>
						<span class="visually-hidden">Previous</span>
					</button>
					<button class="carousel-control-next" type="button" data-bs-target="#carouselExampleFade" data-bs-slide="next">
						<span class="carousel-control-next-icon" aria-hidden="true"></span>
						<span class="visually-hidden">Next</span>
					</button>
				</div>
        {# Vehicle Details #}
				<ul class="list-group list-group-flush">
					<li class="list-group-item"><strong>Categorie de véhicule :</strong> {{exemplaire.categorie}}</li>
					<li class="list-group-item"><strong>Marque :</strong> {{exemplaire.marque}}</li>
          <li class="list-group-item"><strong>Modele :</strong> {{exemplaire.modele}}</li>
					<li class="list-group-item"><strong>Type de véhicule :</strong> {{exemplaire.type}}</li>
					<li class="list-group-item"><strong>Carburant:</strong> {{exemplaire.carburant}}</li>
				</ul>
        {# Vehicle Description #}
				<div class="card-body">
					<h3>Descrition</h3>
					<p class="card-text">{{exemplaire.description|raw|nl2br|sanitize_html}}</p>
				</div>
        {# Vehicle Options #}
				<div class="card-body">
					<h3>Options</h3>
					<p class="card-text">{{exemplaire.options|raw|nl2br|sanitize_html}}</p>
				</div>
        {# Added by Employee #}
				<div class="card-footer text-muted">
          Ajoutée par:
          {% for employe in exemplaire.employe %}
            <p class="card-text">{{ employe.prenom }}</p>
          {% endfor %}
        {# Date of Addition #}
        </div>
	      <div class="card-footer text-muted">Date d'ajout: {{exemplaire.DateAjout|date('d-m-Y H:i:s') }}</div>
			</div>
      {# Back to Vehicles List Link #}
      <div class="card-body">
					<a href="{{path('app_occasions_page')}}" class="card-link">Retour à la liste des véhicules</a>
				</div>
		</div>
	</div>
  {# Contact Form #}
	<div class="container w-75 mt-5">
		<h4>Demandez d'information supplémentaire sur ce véhicule en remplissant ce formulaire</h4>
		<p>Ou appelez notre équipe par téléphone au:<a class="ms-2" href="tel://+33123456789">01 23 45 67 89</a>
		</p>
		{% include '_partials/_formContact.html.twig' with {contact_form: contact_form} only %}
	</div>
{% endblock %}

-------------------------------------
Cale: templates//occasions/vehiculeByCarburant.html.twig
Nume: vehiculeByCarburant.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Vincent Parrot - Vehicules Occasion
{% endblock %}
{#{% block javascripts %}
	<script src="{{ asset('assets/js/script_occasions.js') }}" defer></script>
{% endblock %}#}
{% block body %}
	<div class="container">
		<br>
		<h1>Notre sélection de véhicules "
			{{carburant.libelle}} "</h1><br>
		{% if occasions|length<1 %}
			<h3>Aucun vehicule avec ce type de carburant</h3>
		{% endif %}
	</div>
	{% include "occasions/_rechercherfiltrer.html.twig" %}
	<div class="bs-docs-section">
		<div class="container">
			<div class="row">
				{% for _occasion in occasions %}
					<div class="col-lg-3">
						<div class="card mb-3">
							<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">
								<h4 class="card-header">{{_occasion.modele}}</h4>
							</a>
							<div class="card-body">
								<h5 class="card-title">Prix:
									{{_occasion.prix | number_format(0, ',', ' ')}}
									€</h5>
								<h6 class="card-subtitle text-muted">Année:
									{{_occasion.annee}}</h6>
								<h6 class="card-subtitle text-muted">Kilometrage:
									{{_occasion.Kilometrage | number_format(0, ',', ' ')}}
									- km
								</h6>
							</div>
							{#<img src="{{ vich_uploader_asset(_occasion, 'imageFile') }}" alt="Image vehicule">#}
							{% for image in _occasion.VehiculeImages %}
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="">
									<div class="carousel-item {% if loop.first %}active{% endif %}">
										<img src="{{ vich_uploader_asset(image, 'imageFile') }}" id="{{ _occasion.modele }}" class="d-block w-100" alt="{{ _occasion.modele }}">
									</div>
								</a>
							{% endfor %}
							<ul class="list-group list-group-flush">
								<li class="list-group-item">Categorie de véhicule : {{_occasion.categorie}}</li>
								<li class="list-group-item">Marque & Modele : {{_occasion.modele}}</li>
								<li class="list-group-item">Type de véhicule : {{_occasion.type}}</li>
								<li class="list-group-item">Carburant : {{_occasion.carburant}}</li>
							</ul>
							<div class="card-body">
								<h5>Descrition</h5>
								<p class="card-text">{{_occasion.description|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<h5>Options</h5>
								<p class="card-text">{{_occasion.options|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">Plus d'info</a>
							</div>
							<div class="card-footer text-muted"></div>
						</div>
					</div>
				{% endfor %}
			</div>
		</div>
	</div>
{% endblock %}

-------------------------------------
Cale: templates//occasions/vehiculeByCategorie.html.twig
Nume: vehiculeByCategorie.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Vincent Parrot - Vehicules Occasion
{% endblock %}
{#{% block javascripts %}
	<script src="{{ asset('assets/js/script_occasions.js') }}" defer></script>
{% endblock %}#}
{% block body %}
	<div class="container">
		<br>
		<h1>Notre sélection de véhicules de la categorie "
			{{categorie.libelle}} "</h1><br>
		{% if occasions|length<1 %}
			<h3>Aucun vehicule dans cet categorie</h3>
		{% endif %}
	</div>
	{% include "occasions/_rechercherfiltrer.html.twig" %}
	<div class="bs-docs-section">
		<div class="container">
			<div class="row">
				{% for _occasion in occasions %}
					<div class="col-lg-3">
						<div class="card mb-3">
							<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">
								<h4 class="card-header">{{_occasion.modele}}</h4>
							</a>
							<div class="card-body">
								<h5 class="card-title">Prix:
									{{_occasion.prix | number_format(0, ',', ' ')}}
									€</h5>
								<h6 class="card-subtitle text-muted">Année:
									{{_occasion.annee}}</h6>
								<h6 class="card-subtitle text-muted">Kilometrage:
									{{_occasion.Kilometrage | number_format(0, ',', ' ')}}
									- km
								</h6>
							</div>
							{#<img class="img-fluid rounded" src="{{ vich_uploader_asset(_occasion, 'VoituresImages') }}" alt="Image vehicule">#}
							{% for image in _occasion.VehiculeImages %}
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="">
									<div class="carousel-item {% if loop.first %}active{% endif %}">
										<img src="{{ vich_uploader_asset(image, 'imageFile') }}" id="{{ _occasion.modele }}" class="d-block w-100" alt="{{ _occasion.modele }}">
									</div>
								</a>
							{% endfor %}
							<ul class="list-group list-group-flush">
								<li class="list-group-item">Categorie de véhicule : {{_occasion.categorie}}</li>
								<li class="list-group-item">Marque & Modele : {{_occasion.modele}}</li>
								<li class="list-group-item">Type de véhicule : {{_occasion.type}}</li>
								<li class="list-group-item">Carburant : {{_occasion.carburant}}</li>
							</ul>
							<div class="card-body">
								<h5>Descrition</h5>
								<p class="card-text">{{_occasion.description|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<h5>Options</h5>
								<p class="card-text">{{_occasion.options|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">Plus d'info</a>
							</div>
							<div class="card-footer text-muted"></div>
						</div>
					</div>
				{% endfor %}
			</div>
		</div>
	</div>
{% endblock %}

-------------------------------------
Cale: templates//occasions/vehiculeByMarque.html.twig
Nume: vehiculeByMarque.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Vincent Parrot - Vehicules Occasion
{% endblock %}
{#{% block javascripts %}
	<script src="{{ asset('assets/js/script_occasions.js') }}" defer></script>
{% endblock %}#}
{% block body %}
	<div class="container">
		<br>
		<h1>Notre sélection de véhicules de la marque "
			{{marque.nom}} "</h1><br>
		{% if occasions|length<1 %}
			<h3>Aucun vehicule dans cet marque</h3>
		{% endif %}
	</div>
	{% include "occasions/_rechercherfiltrer.html.twig" %}
	<div class="bs-docs-section">
		<div class="container">
			<div class="row">
				{% for _occasion in occasions %}
					<div class="col-lg-3">
						<div class="card mb-3">
							<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">
								<h4 class="card-header">{{_occasion.modele}}</h4>
							</a>
							<div class="card-body">
								<h5 class="card-title">Prix:
									{{_occasion.prix}}
									€</h5>
								<h6 class="card-subtitle text-muted">Année:
									{{_occasion.annee}}</h6>
								<h6 class="card-subtitle text-muted">Kilometrage:
									{{_occasion.Kilometrage}}
									- km
								</h6>
							</div>
							{#<img class="img-fluid rounded" src="{{ vich_uploader_asset(_occasion, 'imageFile') }}" alt="Image vehicule">#}
							<ul class="list-group list-group-flush">
								<li class="list-group-item">Marque & Modele : {{_occasion.modele}}</li>
								<li class="list-group-item">Type de véhicule :
									{{_occasion.type}}</li>
							</ul>
							<div class="card-body">
								<h5>Descrition</h5>
								<p class="card-text">{{_occasion.description|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<h5>Options</h5>
								<p class="card-text">{{_occasion.options|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">Plus d'info</a>
							</div>
							<div class="card-footer text-muted"></div>
						</div>
					</div>
				{% endfor %}
			</div>
		</div>
	</div>
{% endblock %}

-------------------------------------
Cale: templates//occasions/vehiculeByModele.html.twig
Nume: vehiculeByModele.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Vincent Parrot - Vehicules Occasion
{% endblock %}
{#{% block javascripts %}
	<script src="{{ asset('assets/js/script_occasions.js') }}" defer></script>
{% endblock %}#}
{% block body %}
	<div class="container">
		<br>
		<h1>Notre sélection de véhicules modele "
			{{modele.nom}} "</h1><br>
		{% if occasions|length<1 %}
			<h3>Aucun vehicule dans cet categorie</h3>
		{% endif %}
	</div>
	{% include "occasions/_rechercherfiltrer.html.twig" %}
	<div class="bs-docs-section">
		<div class="container">
			<div class="row">
				{% for _occasion in occasions %}
					<div class="col-lg-3">
						<div class="card mb-3">
							<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">
								<h4 class="card-header">{{_occasion.modele}}</h4>
							</a>
							<div class="card-body">
								<h5 class="card-title">Prix:
									{{_occasion.prix | number_format(0, ',', ' ')}}
									€</h5>
								<h6 class="card-subtitle text-muted">Année:
									{{_occasion.annee}}</h6>
								<h6 class="card-subtitle text-muted">Kilometrage:
									{{_occasion.Kilometrage | number_format(0, ',', ' ')}}
									- km
								</h6>
							</div>
							{#<img class="img-fluid rounded" src="{{ vich_uploader_asset(_occasion, 'VoituresImages') }}" alt="Image vehicule">#}
							{% for image in _occasion.VehiculeImages %}
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="">
									<div class="carousel-item {% if loop.first %}active{% endif %}">
										<img src="{{ vich_uploader_asset(image, 'imageFile') }}" id="{{ _occasion.modele }}" class="d-block w-100" alt="{{ _occasion.modele }}">
									</div>
								</a>
							{% endfor %}
							<ul class="list-group list-group-flush">
								<li class="list-group-item">Categorie de véhicule : {{_occasion.categorie}}</li>
								<li class="list-group-item">Marque & Modele : {{_occasion.modele}}</li>
								<li class="list-group-item">Type de véhicule : {{_occasion.type}}</li>
								<li class="list-group-item">Carburant : {{_occasion.carburant}}</li>
							</ul>
							<div class="card-body">
								<h5>Descrition</h5>
								<p class="card-text">{{_occasion.description|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<h5>Options</h5>
								<p class="card-text">{{_occasion.options|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">Plus d'info</a>
							</div>
							<div class="card-footer text-muted"></div>
						</div>
					</div>
				{% endfor %}
			</div>
		</div>
	</div>
{% endblock %}

-------------------------------------
Cale: templates//occasions/vehiculeByType.html.twig
Nume: vehiculeByType.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Vincent Parrot - Vehicules Occasion
{% endblock %}
{#{% block javascripts %}
	<script src="{{ asset('assets/js/script_occasions.js') }}" defer></script>
{% endblock %}#}
{% block body %}
	<div class="container">
		<br>
		<h1>Notre sélection de véhicules de type "
			{{type.libelle}} "</h1><br>
		{% if occasions|length<1 %}
			<h3>Aucune voiture de ce type</h3>
		{% endif %}
	</div>
	{% include "occasions/_rechercherfiltrer.html.twig" %}
	<div class="bs-docs-section">
		<div class="container">
			<div class="row">
				{% for _occasion in occasions %}
					<div class="col-lg-3">
						<div class="card mb-3">
							<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">
								<h4 class="card-header">{{_occasion.modele}}</h4>
							</a>
							<div class="card-body">
								<h5 class="card-title">Prix:
									{{_occasion.prix | number_format(0, ',', ' ')}}
									€</h5>
								<h6 class="card-subtitle text-muted">Année:
									{{_occasion.annee}}</h6>
								<h6 class="card-subtitle text-muted">Kilometrage:
									{{_occasion.Kilometrage | number_format(0, ',', ' ')}}
									- km
								</h6>
							</div>
							{#<img class="img-fluid rounded" src="{{ vich_uploader_asset(_occasion, 'imageFile') }}" alt="Image vehicule">#}
							{% for image in _occasion.VehiculeImages %}
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="">
									<div class="carousel-item {% if loop.first %}active{% endif %}">
										<img src="{{ vich_uploader_asset(image, 'imageFile') }}" id="{{ _occasion.modele }}" class="d-block w-100" alt="{{ _occasion.modele }}">
									</div>
								</a>
							{% endfor %}
							<ul class="list-group list-group-flush">
								<li class="list-group-item">Categorie de véhicule : {{_occasion.categorie}}</li>
								<li class="list-group-item">Marque & Modele : {{_occasion.modele}}</li>
								<li class="list-group-item">Type de véhicule : {{_occasion.type}}</li>
								<li class="list-group-item">Carburant : {{_occasion.carburant}}</li>
							</ul>
							<div class="card-body">
								<h5>Descrition</h5>
								<p class="card-text">{{_occasion.description|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<h5>Options</h5>
								<p class="card-text">{{_occasion.options|slice(0,60)}}...</p>
							</div>
							<div class="card-body">
								<a href="{{ path('app_exemplaire_show',{'id':_occasion.id}) }}" class="card-link">Plus d'info</a>
							</div>
							<div class="card-footer text-muted"></div>
						</div>
					</div>
				{% endfor %}
			</div>
		</div>
	</div>
{% endblock %}

-------------------------------------
Cale: templates//pages/apropos.html.twig
Nume: apropos.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Garage V. Parrot 
	{{title}}
{% endblock %}

{% block body %}

	<div class="container">
		<h1 class="mt-5 mb-5">Bienvenue au Garage V. Parrot !</h1>
		<p>Fondé en 2009 par Vincent Parrot, notre garage automobile est né de la passion pour la mécanique et l'engagement envers la satisfaction de nos clients. Fort de plus de 15 ans d'expérience dans le domaine de la réparation automobile, Vincent a créé cet établissement avec une vision claire : offrir un service de qualité, personnalisé et fiable à tous ceux qui franchissent nos portes.</p>
		<p>Depuis notre ouverture, nous nous sommes engagés à fournir une gamme complète de services pour répondre à tous les besoins de nos clients en matière de réparation et d'entretien automobile. Que ce soit pour des travaux de carrosserie, des interventions mécaniques ou des entretiens réguliers, notre équipe hautement qualifiée est là pour garantir la performance et la sécurité de votre véhicule.</p>
		<p>Au Garage V. Parrot, nous ne nous contentons pas seulement de réparer des voitures, nous les chérissons comme les nôtres. Nous comprenons à quel point il est important pour nos clients de se sentir en confiance lorsque confiant leur véhicule à un atelier, c'est pourquoi nous nous efforçons chaque jour de mériter cette confiance.</p>
		<p>Nous ne sommes pas seulement un garage, mais aussi un partenaire de confiance pour nos clients. En plus de nos services de réparation et d'entretien, nous proposons également une sélection de véhicules d'occasion de qualité, soigneusement inspectés et préparés pour une nouvelle aventure sur la route.</p>
		<p>Au Garage V. Parrot, notre engagement envers l'excellence et la satisfaction client est au cœur de tout ce que nous faisons. Nous sommes fiers de notre travail et nous nous efforçons constamment de dépasser les attentes de nos clients.</p>
		<p>Nous vous invitons à nous rendre visite et à découvrir par vous-même l'expérience Garage V. Parrot. Nous sommes impatients de vous accueillir et de prendre soin de votre véhicule.</p>
		<p>Vincent Parrot et toute l'équipe du Garage V. Parrot</p>
	</div>
{% endblock %}
-------------------------------------
Cale: templates//pages/cgu.html.twig
Nume: cgu.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}
	{{title}}
{% endblock %}

{% block body %}

	<div class="container">
		<h1 class="mt-5 mb-5">Conditions Générales d’Utilisation</h1>
		<p>Bienvenue sur le site web du Garage V. Parrot. En utilisant ce site, vous acceptez de vous conformer aux conditions générales d'utilisation énoncées ci-dessous. Ces conditions peuvent être modifiées périodiquement, et votre utilisation continue du site constitue votre accord avec ces modifications.</p>
		<p><strong>Compte Utilisateur :</strong> L'accès à certaines fonctionnalités du site nécessite la création d'un compte utilisateur. Vous êtes responsable du maintien de la confidentialité de vos informations d'identification et de toutes les activités qui se produisent sous votre compte.</p>
		<p><strong>Contenu du Site :</strong> Le contenu du site, y compris les textes, images, vidéos, et autres éléments, est la propriété du Garage V. Parrot et est protégé par les lois sur le droit d'auteur. Toute utilisation non autorisée du contenu est strictement interdite.</p>
		<p><strong>Utilisation Responsable :</strong> En utilisant ce site, vous vous engagez à ne pas violer les lois en vigueur, à ne pas perturber le fonctionnement du site, et à ne pas compromettre la sécurité du site ou de ses utilisateurs.</p>
		<p><strong>Protection des Données :</strong> Nous prenons la protection de vos données personnelles au sérieux. Les informations que vous nous fournissez seront traitées conformément à notre politique de confidentialité.</p>
		<p><strong>Responsabilité :</strong> Le Garage V. Parrot ne peut être tenu responsable des dommages directs, indirects, spéciaux, consécutifs ou autres résultant de l'utilisation de ce site.</p>
		<p>En utilisant ce site, vous acceptez ces conditions générales d'utilisation. Si vous n'acceptez pas ces conditions, veuillez ne pas utiliser ce site.</p>
	</div>
{% endblock %}
-------------------------------------
Cale: templates//pages/mentions.html.twig
Nume: mentions.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}
	{{title}}
{% endblock %}

{% block body %}

	<div class="container">
		<h1 class="mt-5 mb-5">Mentions Légales</h1>
		<p>Le site web du Garage V. Parrot est édité par [Nom de l'entreprise], dont le siège social est situé à [Adresse]. Il est enregistré sous le numéro [Numéro d'enregistrement] et son numéro de TVA est [Numéro de TVA].</p>
		<p>Directeur de la publication : Vincent Parrot</p>
		<p>Le site est hébergé par [Nom de l'hébergeur] dont le siège social est situé à [Adresse de l'hébergeur].</p>
		<p>Pour toute question ou réclamation, veuillez nous contacter à l'adresse électronique suivante : [Adresse e-mail].</p>
		<p>Le Garage V. Parrot est une entreprise enregistrée et opérant en conformité avec les lois en vigueur. Nous nous réservons le droit de modifier le contenu de ce site et ces mentions légales à tout moment. Il est de votre responsabilité de consulter régulièrement ces mentions pour être informé des mises à jour.</p>
	</div>
{% endblock %}
-------------------------------------
Cale: templates//pagination/sortable.html.twig
Nume: sortable.html.twig
Continut:
<a{% for attr, value  in options | merge({class: 'btn btn-secondary ms-2'}) %} {{ attr }}="{{ value }}"{% endfor %}>
    <span class="float-right">
        {% if sorted %}
            {% if direction == 'desc' %}
                <i class="fa fa-sort-down"></i>
            {% else %}
                <i class="fa fa-sort-up"></i>
            {% endif %}
        {% else %}
            <i class="fa fa-sort"></i>
        {% endif %}
    </span>
    {{ title }}
</a>
-------------------------------------
Cale: templates//security/login.html.twig
Nume: login.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Connexion !{% endblock %}

{% block body %}
<div class="container w-75">
    <form method="post">
        {% if error %}
            <div class="alert alert-danger">{{ error.messageKey|trans(error.messageData, 'security') }}</div>
        {% endif %}

        {% if app.user %}
            <div class="mb-3">
                Vous êtes connecté en tant que: {{ app.user.userIdentifier }}, <a href="{{ path('app_logout') }}">Se déconnecter</a>
            </div>
        {% endif %}

        <h1 class="mt-5 mb-5">Veuillez vous connecter</h1>
        <label for="inputEmail">Email</label>
        <input type="email" value="{{ last_username }}" name="email" id="inputEmail" class="form-control" autocomplete="email" required autofocus>
        <label class="mt-3" for="inputPassword">Mot de passe</label>
        <input type="password" name="password" id="inputPassword" class="form-control" autocomplete="current-password" required>

        <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">

        <button class="btn btn-lg btn-primary mt-3 mb-3" type="submit">
            Connexion
        </button>
    </form>
</div>
{% endblock %}

-------------------------------------
Cale: assets/app.js
Nume: app.js
Continut:
/*
 * Welcome to your app's main JavaScript file!
 *
 * We recommend including the built version of this JavaScript file
 * (and its CSS file) in your base layout (base.html.twig).
 */

// any CSS you import will output into a single css file (app.css in this case)
/*import './styles/style.css';*/
import noUiSlider from '../node_modules/nouislider/dist/nouislider';
import '../node_modules/nouislider/dist/nouislider.css'
import Filter from './modules/Filter'

// Creating a new Filter instance for the '.js-filter' element
new Filter(document.querySelector('.js-filter'))

// Setting up sliders for price, km, and year
// Price Slider
const prixSlider = document.getElementById('prix-slider');

if (prixSlider) {
    const prixmin = document.getElementById('prixmin');
    const prixmax = document.getElementById('prixmax');
    const prixminValue = Math.floor(parseInt(prixSlider.dataset.min, 10) / 10) * 10;
    const prixmaxValue = Math.ceil(parseInt(prixSlider.dataset.max, 10) / 10) * 10;
    const range = noUiSlider.create(prixSlider, {
        start: [prixmin.value || prixminValue, prixmax.value || prixmaxValue],
        connect: true,
        step: 1000,
        range: {
            'min': prixminValue,
            'max': prixmaxValue
        }
    });

    range.on('slide', function (values, handle) {
        if (handle === 0) {
            prixmin.value = Math.round(values[0])
        }
        if (handle === 1) {
            prixmax.value = Math.round(values[1])
        }
    })
    range.on('end', function (values, handle) {
        if (handle === 0) {
            prixmin.dispatchEvent(new Event('change'))
        } else {
            prixmax.dispatchEvent(new Event('change'))
        }
    })
}

// Km Slider
const kmSlider = document.getElementById('km-slider');

if (kmSlider) {
    const kmmin = document.getElementById('kmmin');
    const kmmax = document.getElementById('kmmax');
    const kmminValue = Math.floor(parseInt(kmSlider.dataset.min, 10) / 10) * 10;
    const kmmaxValue = Math.ceil(parseInt(kmSlider.dataset.max, 10) / 10) * 10;
    const range = noUiSlider.create(kmSlider, {
        start: [kmmin.value || kmminValue, kmmax.value || kmmaxValue],
        connect: true,
        step: 100,
        range: {
            'min': kmminValue,
            'max': kmmaxValue
        }
    });

    range.on('slide', function (values, handle) {
        if (handle === 0) {
            kmmin.value = Math.round(values[0])
        }
        if (handle === 1) {
            kmmax.value = Math.round(values[1])
        }
    })
    range.on('end', function (values, handle) {
        if (handle === 0) {
            kmmin.dispatchEvent(new Event('change'))
        } else {
            kmmax.dispatchEvent(new Event('change'))
        }
    })
}

// // Year Slider
const anneeSlider = document.getElementById('annee-slider');

if (anneeSlider) {
    const anneemin = document.getElementById('anneemin');
    const anneemax = document.getElementById('anneemax');

    // Calculate the maximum allowed year (current year)
    const currentYear = new Date().getFullYear();
    const maxAllowedYear = Math.min(parseInt(anneeSlider.dataset.max, 10), currentYear);


    const anneeminValue = Math.floor(parseInt(anneeSlider.dataset.min, 10) / 10) * 10;
    //const anneemaxValue = Math.ceil(parseInt(anneeSlider.dataset.max, 10) / 10) * 10;
    const anneemaxValue = Math.min(Math.ceil(parseInt(anneeSlider.dataset.max, 10) / 10) * 10, maxAllowedYear);
    const range = noUiSlider.create(anneeSlider, {
        start: [anneemin.value || anneeminValue, anneemax.value || anneemaxValue],
        connect: true,
        step: 1,
        range: {
            'min': anneeminValue,
            'max': anneemaxValue
        }
    });

    range.on('slide', function (values, handle) {
        if (handle === 0) {
            anneemin.value = Math.round(values[0])
        }
        if (handle === 1) {
            anneemax.value = Math.round(values[1])
        }
    })
    range.on('end', function (values, handle) {
        if (handle === 0) {
            anneemin.dispatchEvent(new Event('change'))
        } else {
            anneemax.dispatchEvent(new Event('change'))
        }
    })
}
/*
window.onload = function(){

    const selectMarque = document.getElementById("marqueSelect");

    const redirectMarque = () => {   
        location.href=document.getElementById("marqueSelect").value;
    }
    
    selectMarque.addEventListener('change', redirectMarque)

    const selectModele = document.getElementById("modeleSelect");

    const redirectModele = () => {   
        location.href=document.getElementById("modeleSelect").value;
    }
    
    selectModele.addEventListener('change', redirectModele)
  
    const selectCategorie = document.getElementById("categorieSelect");

    const redirectCategorie = () => {   
        location.href=document.getElementById("categorieSelect").value;
    }
    
    selectCategorie.addEventListener('change', redirectCategorie)

    const selectType = document.getElementById("typeSelect");

    const redirectType = () => {   
        location.href=document.getElementById("typeSelect").value;
    }
    
    selectType.addEventListener('change', redirectType)

    const selectCarburant = document.getElementById("carburantSelect");

    const redirectCarburant = () => {   
        location.href=document.getElementById("carburantSelect").value;
    }
    
    selectCarburant.addEventListener('change', redirectCarburant)
}

// Get table element
const table = document.getElementById('openingHoursTable');

// Function to modify the table for Samedi and Dimanche
function modifyTable() {
  // Merge last two cells for Samedi
  const samediRow = document.getElementById('Samedi').parentElement;
  samediRow.lastElementChild.colSpan = 4;

  // Merge all four cells for Dimanche
  const dimancheRow = document.getElementById('Dimanche').parentElement;
  dimancheRow.lastElementChild.colSpan = 2;

  // Remove unnecessary cells in Dimanche row
  const nextSibling = dimancheRow.lastElementChild.nextElementSibling;
  if (nextSibling) {
    nextSibling.remove();
  }
}

// Call the function to modify the table
modifyTable();
*/

-------------------------------------
Cale: assets/app.txt
Nume: app.txt
Continut:
/*
 * Welcome to your app's main JavaScript file!
 *
 * We recommend including the built version of this JavaScript file
 * (and its CSS file) in your base layout (base.html.twig).
 */

// any CSS you import will output into a single css file (app.css in this case)
/*import './styles/style.css';*/
import noUiSlider from '../node_modules/nouislider/dist/nouislider';
import '../node_modules/nouislider/dist/nouislider.css'
import Filter from './modules/Filter'

new Filter(document.querySelector('.js-filter'))

const prixSlider = document.getElementById('prix-slider');

if (prixSlider) {
    const prixmin =document.getElementById('prixmin');
    const prixmax =document.getElementById('prixmax');
    const prixminValue = Math.floor(parseInt(prixSlider.dataset.min, 10) / 10) * 10;
    const prixmaxValue = Math.ceil(parseInt(prixSlider.dataset.max, 10) / 10) * 10;
    const range = noUiSlider.create(prixSlider, {
        start: [prixmin.value || prixminValue, prixmax.value || prixmaxValue],
        connect: true,
        step: 1000,
        range: {
            'min': prixminValue,
            'max': prixmaxValue
        }
    });
    
    range.on('slide', function (values, handle) {
        if (handle === 0) {
            prixmin.value = Math.round(values[0])
        }
        if (handle === 1) {
            prixmax.value = Math.round(values[1])
        }
    })
    range.on('end', function (values, handle) {
        prixmin.dispatchEvent(new Event('change'))
    })
}


const kmSlider = document.getElementById('km-slider');

if (kmSlider) {
    const kmmin =document.getElementById('kmmin');
    const kmmax =document.getElementById('kmmax');
    const kmminValue = Math.floor(parseInt(kmSlider.dataset.min, 10) / 10) * 10;
    const kmmaxValue = Math.ceil(parseInt(kmSlider.dataset.max, 10) / 10) * 10;
    const range = noUiSlider.create(kmSlider, {
        start: [kmmin.value || kmminValue, kmmax.value || kmmaxValue],
        connect: true,
        step: 100,
        range: {
            'min': kmminValue,
            'max': kmmaxValue
        }
    });
    
    range.on('slide', function (values, handle) {
        if (handle === 0) {
            kmmin.value = Math.round(values[0])
        }
        if (handle === 1) {
            kmmax.value = Math.round(values[1])
        }
    })
    range.on('end', function (values, handle) {
        kmmin.dispatchEvent(new Event('change'))
    })
}


const anneeSlider = document.getElementById('annee-slider');
if (anneeSlider) {
    const anneemin =document.getElementById('anneemin');
    const anneemax =document.getElementById('anneemax');
    const anneeminValue = Math.floor(parseInt(anneeSlider.dataset.min, 10) / 10) * 10;
    const anneemaxValue = Math.ceil(parseInt(anneeSlider.dataset.max, 10) / 10) * 10;
    const range = noUiSlider.create(anneeSlider, {
        start: [anneemin.value || anneeminValue, anneemax.value || anneemaxValue],
        connect: true,
        step: 1,
        range: {
            'min': anneeminValue,
            'max': anneemaxValue
        }
    });
    
    range.on('slide', function (values, handle) {
        if (handle === 0) {
            anneemin.value = Math.round(values[0])
        }
        if (handle === 1) {
            anneemax.value = Math.round(values[1])
        }
    })
    range.on('end', function (values, handle) {
        anneemin.dispatchEvent(new Event('change'))
    })
}

var dimanche = document.getElementById('Dimanche');
var samedi = document.getElementById('Samedi');
-------------------------------------
Cale: assets/modules/Filter.js
Nume: Filter.js
Continut:
/**
 * @property {HTMLElement} pagination
 * @property {HTMLElement} content
 * @property {HTMLElement} sorting
 * @property {HTMLFormElement} form
 * @property {number} page
 */
export default class Filter {

  /**
   * @param {HTMLElement|null} element
   */
  constructor(element) {
    if (element === null) {
      return
    }

    // Initializing properties
    this.pagination = element.querySelector('.js-filter-pagination')
    this.content = element.querySelector('.js-filter-content')
    this.sorting = element.querySelector('.js-filter-sorting')
    this.form = element.querySelector('.js-filter-form')
    this.bindEvents()
  }

  /**
  * Ajoute les comportements aux différents éléments
  */
  bindEvents() {
    const aClickListener = e => {
      if (e.target.tagName === 'A') {
        e.preventDefault()
        this.loadUrl(e.target.getAttribute('href'))
      }
    }
    // Adding event listeners
    this.sorting.addEventListener('click', aClickListener)
    this.pagination.addEventListener('click', aClickListener)
    // Event listeners for form inputs
    this.form.querySelectorAll('input').forEach(input => {
      input.addEventListener('change', this.loadForm.bind(this))
    })
    this.form.querySelectorAll('select').forEach(select => {
      select.addEventListener('change', this.loadForm.bind(this))
      //console.log("Event listener attached for:", select);
      //console.log("Selected marque:", marque);
    })
    // Event delegation for select elements within the form
    this.form.addEventListener('change', (event) => {
      if (event.target.tagName === 'SELECT') {
        //console.log('Change event fired on select');
        //console.log('Select element name:', event.target.name);
        if (event.target.name === 'marque[]') { // Check if the changed select is the 'marque'
          //console.log('Change event fired on marque');
          this.loadModels();
        } else {
          this.loadForm(); // Handle changes for other select elements
        }
      }
    });

  }
  // Loads form data asynchronously
  async loadForm() {
    const data = new FormData(this.form)
    const url = new URL(this.form.getAttribute('action') || window.location.href)
    const params = new URLSearchParams()
    data.forEach((value, key) => {
      params.append(key, value)
    })
    return this.loadUrl(url.pathname + '?' + params.toString())
  }
  // Loads content based on a given URL
  async loadUrl(url) {
    const ajaxUrl = url + '&ajax=1'
    const response = await fetch(ajaxUrl, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    if (response.status >= 200 && response.status < 300) {
      const data = await response.json()
      //console.log(data)
      this.content.innerHTML = data.content
      this.sorting.innerHTML = data.sorting
      this.pagination.innerHTML = data.pagination
      this.updatePrix(data);
      this.updateKm(data);
      this.updateAnnee(data);
      history.replaceState({}, '', url)  // pushState pour l'historique
    } else {
      console.error(response)
    }

    //this.hideLoader()

  }
  showLoader() {
    this.form.classList.add('is-loading')
    const loader = this.form.querySelector('.js-loading')
    if (loader === null) {
      return
    }

    loader.setAttribute('aria-hidden', 'false')
    loader.style.display = null
  }

  hideLoader() {
    this.form.classList.remove('is-loading')
    const loader = this.form.querySelector('.js-loading')
    if (loader === null) {
      return
    }

    loader.setAttribute('aria-hidden', 'true')
    loader.style.display = 'none'
  }
  // Updates the price slider
  updatePrix(data) {
    const prixSlider = document.getElementById('prix-slider')
    if (prixSlider === null) {
      return
    }
    prixSlider.noUiSlider.updateOptions({
      reange: {
        min: data.prixmin,
        max: data.prixmax,
      }
    })
  }
  // Updates the km slider
  updateKm(data) {
    const kmSlider = document.getElementById('km-slider')
    if (kmSlider === null) {
      return
    }
    kmSlider.noUiSlider.updateOptions({
      reange: {
        min: data.kmmin,
        max: data.kmmax
      }
    })
  }
  // Updates the year slider
  updateAnnee(data) {
    const anneeSlider = document.getElementById('annee-slider')
    if (anneeSlider === null) {
      return
    }
    anneeSlider.noUiSlider.updateOptions({
      reange: {
        min: data.anneemin,
        max: data.anneemax
      }
    })
  }

  async loadModels() {
    const marqueId = this.form.querySelector('select[name="marque[]"]').value;
    const url = '/modeles/fetch?marqueId=' + marqueId; // New route for fetching models

    const response = await fetch(url, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    });

    if (response.status >= 200 && response.status < 300) {
      const data = await response.json();
      this.updateModelsSelect(data); // Update the 'modele' select box
    } else {
      console.error(response);
    }
  }

  updateModelsSelect(models) {
    const modeleSelect = this.form.querySelector('select[name="modele[]"]');
    modeleSelect.innerHTML = ''; // Clear existing options

    models.forEach(model => {
      const option = document.createElement('option');
      option.value = model.id;
      option.text = model.nom;
      modeleSelect.add(option);
    });
  }
}
-------------------------------------
Cale: assets/styles/style.css
Nume: style.css
Continut:
:root {
  --red: #ef233c;
  --darkred: #c00424;
  --platinum: #e5e5e5;
  --black: #2b2d42;
  --white: #fff;
  --thumb: #edf2f4;
  --primary: #3193cc;
  --secondary: #81DD90;
  --success: #28a745;
  --danger: #dc3545;
  --warning: #fd7e14;
  --info: #17a2b8;
  --light: #f8f9fa;
  --dark: #343a40;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

body {
  font: 14px / 24px "Roboto";
  color: var(--black);
  background: var(--platinum);
  margin: 50px 0;
}

.container {
  max-width: 2000px;
  padding: 0 15px;
  margin: 0 auto;
}

.temoignageForm {
  max-width: 600px;
  padding: 0 15px;
  margin: 0 auto;
}

h1 {
font: 40px "Georgia";
font-size: 40px;
margin-bottom: 1em;
}

h2 {
  font-size: 32px;
  margin-bottom: 1em;
}

.testimonials {
  display: flex;
  padding: 25px 0px;
  list-style: none;
  overflow-x: scroll;
  -ms-scroll-snap-type: x mandatory;
  scroll-snap-type: x mandatory;
}

.testimony {
  display: flex;
  flex-direction: column;
  flex: 0 0 100%;
  padding: 20px;
  background: var(--white);
  border-radius: 12px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 15%);
  scroll-snap-align: start;
  transition: all 0.2s;
}

.testimony:not(:last-child) {
  margin-right: 10px;
}

.testimony:hover {
  color: var(--white);
  background: var(--red);
}

.testimony .testimony-title {
  font-size: 20px;
}

.testimony-date {
  font-size: 10px;
}

.testimony.testimony-content {
  margin: 20px 0;
  max-width: 85%;
}

.testimony .testimony-link-wrapper {
  margin-top: auto;
}

.testimony .testimony-link {
  display: inline-block;
  text-decoration: none;
  color: white;
  background: var(--red);
  padding: 6px 12px;
  border-radius: 8px;
  transition: background 0.2s;
}

.testimony:hover .testimony-link {
  background: var(--darkred);
}

.testimonials::-webkit-scrollbar {
  height: 12px;
}

.testimonials::-webkit-scrollbar-thumb,
.testimonials::-webkit-scrollbar-track {
  border-radius: 92px;
}

.testimonials::-webkit-scrollbar-thumb {
  background: var(--darkred);
}

.testimonials::-webkit-scrollbar-track {
  background: var(--thumb);
}

@media (min-width: 500px) {
  .testimony {
      flex-basis: calc(50% - 10px);
  }

  .testimony:not(:last-child) {
      margin-right: 20px;
  }

  .grid {
      display: grid;
      grid-template-columns: 1fr;
      grid-gap: 0px;
  }
}

@media (min-width: 768px) {
  .testimony {
      flex-basis: calc(calc(100% / 3) - 20px);
  }

  .testimony:not(:last-child) {
      margin-right: 30px;
  }

  .grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-gap: 20px;
  }
}

@media (min-width: 1100px) {
  .testimony {
      flex-basis: calc(25% - 30px);
  }

  .testimony:not(:last-child) {
      margin-right: 40px;
  }

  .grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-gap: 20px;
  }
}



.filter {
  display: block;
  position: sticky;
  top: 20px;
}

.is-loading::before {
  content:'';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background-color: #fff;
  opacity: .5;
  z-index: 4;
}

.is-loading .spinner-border {
  position: absolute;
  top: calc(50% - 1rem);
  left: calc(50% - 1rem);
  z-index: 5;
}
-------------------------------------
Cale: migrations/.gitignore
Nume: .gitignore
Continut:

-------------------------------------
Cale: migrations/Version20241211102910.php
Nume: Version20241211102910.php
Continut:
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20241211102910 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql('CREATE TABLE carburant (id INT AUTO_INCREMENT NOT NULL, libelle VARCHAR(32) NOT NULL, UNIQUE INDEX UNIQ_B46A330AA4D60759 (libelle), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE categorie (id INT AUTO_INCREMENT NOT NULL, libelle VARCHAR(32) NOT NULL, UNIQUE INDEX UNIQ_497DD634A4D60759 (libelle), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE contact (id INT AUTO_INCREMENT NOT NULL, nom VARCHAR(100) NOT NULL, prenom VARCHAR(100) NOT NULL, email VARCHAR(255) NOT NULL, tel VARCHAR(20) NOT NULL, message LONGTEXT NOT NULL, date_envoi DATETIME NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE employes (id INT AUTO_INCREMENT NOT NULL, nom VARCHAR(100) NOT NULL, prenom VARCHAR(100) NOT NULL, email VARCHAR(180) NOT NULL, roles JSON NOT NULL COMMENT \'(DC2Type:json)\', date_creation DATETIME NOT NULL COMMENT \'(DC2Type:datetime_immutable)\', password VARCHAR(255) NOT NULL, UNIQUE INDEX UNIQ_A94BC0F0E7927C74 (email), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE horaire (id INT AUTO_INCREMENT NOT NULL, jour VARCHAR(100) NOT NULL, ouverture_matin VARCHAR(40) NOT NULL, fermeture_midi VARCHAR(40) DEFAULT NULL, ouverture_apres_midi VARCHAR(40) DEFAULT NULL, fermeture_soir VARCHAR(40) DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE marque (id INT AUTO_INCREMENT NOT NULL, nom VARCHAR(40) NOT NULL, UNIQUE INDEX UNIQ_5A6F91CE6C6E55B5 (nom), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE modele (id INT AUTO_INCREMENT NOT NULL, marque_id INT NOT NULL, nom VARCHAR(50) NOT NULL, INDEX IDX_100285584827B9B2 (marque_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE service (id INT AUTO_INCREMENT NOT NULL, titre VARCHAR(100) NOT NULL, description1 LONGTEXT DEFAULT NULL, description2 LONGTEXT DEFAULT NULL, description3 LONGTEXT DEFAULT NULL, listeitem1 VARCHAR(100) DEFAULT NULL, listeitem2 VARCHAR(100) DEFAULT NULL, listeitem3 VARCHAR(100) DEFAULT NULL, listeitem4 VARCHAR(100) DEFAULT NULL, listeitem5 VARCHAR(100) DEFAULT NULL, image_name VARCHAR(255) DEFAULT NULL, image_size INT DEFAULT NULL, updated_at DATETIME DEFAULT NULL COMMENT \'(DC2Type:datetime_immutable)\', PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE temoignage (id INT AUTO_INCREMENT NOT NULL, nom VARCHAR(100) NOT NULL, commentaire LONGTEXT NOT NULL, note INT NOT NULL, approuve TINYINT(1) NOT NULL, updated_at DATETIME NOT NULL COMMENT \'(DC2Type:datetime_immutable)\', PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE temoignage_employes (temoignage_id INT NOT NULL, employes_id INT NOT NULL, INDEX IDX_2B728EF0F2410A1E (temoignage_id), INDEX IDX_2B728EF0F971F91F (employes_id), PRIMARY KEY(temoignage_id, employes_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE type (id INT AUTO_INCREMENT NOT NULL, libelle VARCHAR(32) NOT NULL, UNIQUE INDEX UNIQ_8CDE5729A4D60759 (libelle), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE vehicule (id INT AUTO_INCREMENT NOT NULL, marque_id INT NOT NULL, modele_id INT NOT NULL, categorie_id INT NOT NULL, type_id INT NOT NULL, carburant_id INT NOT NULL, titre VARCHAR(255) NOT NULL, prix INT NOT NULL, annee INT NOT NULL, kilometrage INT NOT NULL, description LONGTEXT NOT NULL, options LONGTEXT DEFAULT NULL, date_ajout DATETIME NOT NULL, INDEX IDX_292FFF1D4827B9B2 (marque_id), INDEX IDX_292FFF1DAC14B70A (modele_id), INDEX IDX_292FFF1DBCF5E72D (categorie_id), INDEX IDX_292FFF1DC54C8C93 (type_id), INDEX IDX_292FFF1D32DAAD24 (carburant_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE vehicule_employes (vehicule_id INT NOT NULL, employes_id INT NOT NULL, INDEX IDX_E5193BDB4A4A3511 (vehicule_id), INDEX IDX_E5193BDBF971F91F (employes_id), PRIMARY KEY(vehicule_id, employes_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE vehicule_image (id INT AUTO_INCREMENT NOT NULL, vehicule_id INT NOT NULL, image_name VARCHAR(255) DEFAULT NULL, image_size INT DEFAULT NULL, updated_at DATETIME DEFAULT NULL COMMENT \'(DC2Type:datetime_immutable)\', INDEX IDX_F5E4FC0D4A4A3511 (vehicule_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL COMMENT \'(DC2Type:datetime_immutable)\', available_at DATETIME NOT NULL COMMENT \'(DC2Type:datetime_immutable)\', delivered_at DATETIME DEFAULT NULL COMMENT \'(DC2Type:datetime_immutable)\', INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('ALTER TABLE modele ADD CONSTRAINT FK_100285584827B9B2 FOREIGN KEY (marque_id) REFERENCES marque (id)');
        $this->addSql('ALTER TABLE temoignage_employes ADD CONSTRAINT FK_2B728EF0F2410A1E FOREIGN KEY (temoignage_id) REFERENCES temoignage (id) ON DELETE CASCADE');
        $this->addSql('ALTER TABLE temoignage_employes ADD CONSTRAINT FK_2B728EF0F971F91F FOREIGN KEY (employes_id) REFERENCES employes (id) ON DELETE CASCADE');
        $this->addSql('ALTER TABLE vehicule ADD CONSTRAINT FK_292FFF1D4827B9B2 FOREIGN KEY (marque_id) REFERENCES marque (id)');
        $this->addSql('ALTER TABLE vehicule ADD CONSTRAINT FK_292FFF1DAC14B70A FOREIGN KEY (modele_id) REFERENCES modele (id)');
        $this->addSql('ALTER TABLE vehicule ADD CONSTRAINT FK_292FFF1DBCF5E72D FOREIGN KEY (categorie_id) REFERENCES categorie (id)');
        $this->addSql('ALTER TABLE vehicule ADD CONSTRAINT FK_292FFF1DC54C8C93 FOREIGN KEY (type_id) REFERENCES type (id)');
        $this->addSql('ALTER TABLE vehicule ADD CONSTRAINT FK_292FFF1D32DAAD24 FOREIGN KEY (carburant_id) REFERENCES carburant (id)');
        $this->addSql('ALTER TABLE vehicule_employes ADD CONSTRAINT FK_E5193BDB4A4A3511 FOREIGN KEY (vehicule_id) REFERENCES vehicule (id) ON DELETE CASCADE');
        $this->addSql('ALTER TABLE vehicule_employes ADD CONSTRAINT FK_E5193BDBF971F91F FOREIGN KEY (employes_id) REFERENCES employes (id) ON DELETE CASCADE');
        $this->addSql('ALTER TABLE vehicule_image ADD CONSTRAINT FK_F5E4FC0D4A4A3511 FOREIGN KEY (vehicule_id) REFERENCES vehicule (id)');
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql('ALTER TABLE modele DROP FOREIGN KEY FK_100285584827B9B2');
        $this->addSql('ALTER TABLE temoignage_employes DROP FOREIGN KEY FK_2B728EF0F2410A1E');
        $this->addSql('ALTER TABLE temoignage_employes DROP FOREIGN KEY FK_2B728EF0F971F91F');
        $this->addSql('ALTER TABLE vehicule DROP FOREIGN KEY FK_292FFF1D4827B9B2');
        $this->addSql('ALTER TABLE vehicule DROP FOREIGN KEY FK_292FFF1DAC14B70A');
        $this->addSql('ALTER TABLE vehicule DROP FOREIGN KEY FK_292FFF1DBCF5E72D');
        $this->addSql('ALTER TABLE vehicule DROP FOREIGN KEY FK_292FFF1DC54C8C93');
        $this->addSql('ALTER TABLE vehicule DROP FOREIGN KEY FK_292FFF1D32DAAD24');
        $this->addSql('ALTER TABLE vehicule_employes DROP FOREIGN KEY FK_E5193BDB4A4A3511');
        $this->addSql('ALTER TABLE vehicule_employes DROP FOREIGN KEY FK_E5193BDBF971F91F');
        $this->addSql('ALTER TABLE vehicule_image DROP FOREIGN KEY FK_F5E4FC0D4A4A3511');
        $this->addSql('DROP TABLE carburant');
        $this->addSql('DROP TABLE categorie');
        $this->addSql('DROP TABLE contact');
        $this->addSql('DROP TABLE employes');
        $this->addSql('DROP TABLE horaire');
        $this->addSql('DROP TABLE marque');
        $this->addSql('DROP TABLE modele');
        $this->addSql('DROP TABLE service');
        $this->addSql('DROP TABLE temoignage');
        $this->addSql('DROP TABLE temoignage_employes');
        $this->addSql('DROP TABLE type');
        $this->addSql('DROP TABLE vehicule');
        $this->addSql('DROP TABLE vehicule_employes');
        $this->addSql('DROP TABLE vehicule_image');
        $this->addSql('DROP TABLE messenger_messages');
    }
}

-------------------------------------
